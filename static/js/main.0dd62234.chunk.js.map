{"version":3,"sources":["Data.js","App.js","serviceWorker.js","index.js"],"names":["aspects","core_full","name","id","family","tier","requirements","rewards","force","entropy","form","inertia","life","nodes","hasChoiceNode","core_force","isCoreNode","falcon","hatchet","hornet","serpent","arcanist","archer","manticore","scorpion","tiger","conqueror","kraken","wrath","core_entropy","crow","fly","vulture","wolf","blood_ape","extinction","imp","hyena","supplicant","death","decay","demilich","core_form","chalice","key","nautilus","silkworm","basilisk","doppelganger","dragon","gryphon","wealth","cerberus","ritual","sphinx","core_inertia","armadillo","auroch","crab","guardsman","casque","centurion","gladiator","hippopotamus","rhinoceros","arena","champion","fortress","core_life","beetle","hind","lizard","rabbit","enchantress","huntress","nymph","pegasus","stag","goddess","hope","splendor","strings","x","String","prototype","format","args","arguments","this","replace","m","n","aspect","y","rewardsPerPoint","totalRequirements","z","Checkbox","props","app","state","selection","includes","data","updateSelection","updateExclusion","excluded","text","onClick","undefined","useFullCore","toggle","className","darkMode","React","Component","EmbodimentSelector","embs","minMaxEmbodiments","type","checked","onChange","e","setState","Embodiment","amount","Aspect","elements","element","push","string","header","charAt","toUpperCase","slice","cost","getRewards","nodeText","content","getTooltip","placement","duration","getRequirementsText","getTotalPoints","build","points","length","arraysEqual","_arr1","_arr2","Array","isArray","arr1","concat","sort","arr2","i","filterDuplicateBuilds","builds","pathIds","duplicates","pathId","asp","parseInt","console","log","filter","item","index","filterDuplicatePaths","bestPaths","getTotalReqs","hideUnused","embodiments","getTotalRewards","showAny","any","r","fullfillsRequirements","reqs","getRelevantEmbs","goalBuild","current","relevant","getRemainingReqs","deleteUnused","getRemainingReqs2","goal","hasRelevantRewards","includesAspect","App","result","considerDipping","selfSustain","preference","iterations","maximumOutputs","resultIndex","mode","maxPoints","window","localStorage","getItem","change","bestBuilds","list","realList","excludedAspects","newList","hasRelevantReward","reward","dipping","generated","extraEmbodimentType","bind","func","hasOwnProperty","aspectWithHighestRequirements","chosenAspects","b","waiting","filterApplicableAspects","_","cloneDeep","Object","keys","confirm","buildWithChosenAspects","currentPoints","path","partialT2s","changePoints","delta","addPartialT2","embBonus","realAsp","fullAspect","role","isChosenNode","checkForRemovals","fullfillsGoalsIfRemoved","goals","goalReqs","rews","removeT1s","newPath","reverse","overflowed","buildWithoutSplitT2","realFullAspect","full","ind","ignoreStep","partialT2sToRemove","isChosen","chosenAsp","relevantEmbodiments","sample","finalBuild","remainingReqs","bestPoints","pointsNeeded","buildPoints","validBuilds","selfSustainBuild","bestPathsPoints","c","hasChosenAnyEmbs","alert","minmax","getMinMaxEmbodiments","bestScore","score","val","calculateShortestPath","calculateV2","resultsPanel","changeIndex","textClass","darkModeClass","style","marginRight","relevantEmbs","embDisplay","forceAspects","entropyAspects","formAspects","inertiaAspects","lifeAspects","document","getElementsByTagName","classList","embodimentSelection","currentAspect","clickCallback","hr","requirementsInfo","reqEmbs","rewEmbs","pointsText","marginLeft","renderResults","value","target","setItem","run","href","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0dd62234.chunk.js","sourcesContent":["export const aspects = {\r\n    core_full: {\r\n      name: \"Core (Full)\",\r\n      id: \"core_full\",\r\n      family: \"special\",\r\n      tier: 1,\r\n      requirements: {\r\n      },\r\n      rewards: {\r\n        force: 2,\r\n        entropy: 2,\r\n        form: 2,\r\n        inertia: 2,\r\n        life: 2,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    core_force: {\r\n      name: \"Core (Force)\",\r\n      id: \"core_force\",\r\n      family: \"force\",\r\n      tier: 1,\r\n      requirements: {\r\n      },\r\n      rewards: {\r\n        force: 1,\r\n      },\r\n      nodes: 1,\r\n      hasChoiceNode: false,\r\n      isCoreNode: true,\r\n    },\r\n    falcon: {\r\n      name: \"Falcon\",\r\n      id: \"falcon\",\r\n      family: \"force\",\r\n      tier: 1,\r\n      requirements: {\r\n        force: 1\r\n      },\r\n      rewards: {\r\n        force: 3,\r\n        life: 2,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    hatchet: {\r\n      name: \"Hatchet\",\r\n      id: \"hatchet\",\r\n      family: \"force\",\r\n      tier: 1,\r\n      requirements: {\r\n        force: 1\r\n      },\r\n      rewards: {\r\n        force: 3,\r\n        entropy: 2,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    hornet: {\r\n      name: \"Hornet\",\r\n      id: \"hornet\",\r\n      family: \"force\",\r\n      tier: 1,\r\n      requirements: {\r\n        force: 1,\r\n      },\r\n      rewards: {\r\n        force: 3,\r\n        life: 1,\r\n      },\r\n      nodes: 3,\r\n      hasChoiceNode: false,\r\n    },\r\n    serpent: {\r\n      name: \"Serpent\",\r\n      id: \"serpent\",\r\n      family: \"force\",\r\n      tier: 1,\r\n      requirements: {\r\n        force: 1,\r\n      },\r\n      rewards: {\r\n        force: 3,\r\n        entropy: 1,\r\n      },\r\n      nodes: 3,\r\n      hasChoiceNode: false,\r\n    },\r\n    // FORCE TIER 2\r\n    arcanist: {\r\n      name: \"Arcanist\",\r\n      id: \"arcanist\",\r\n      family: \"force\",\r\n      tier: 2,\r\n      requirements: {\r\n        force: 5,\r\n        life: 1,\r\n      },\r\n      rewards: {\r\n        force: 3,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: true,\r\n    },\r\n    archer: {\r\n      name: \"Archer\",\r\n      id: \"archer\",\r\n      family: \"force\",\r\n      tier: 2,\r\n      requirements: {\r\n        force: 3,\r\n        entropy: 2,\r\n        life: 1,\r\n      },\r\n      rewards: {\r\n        force: 2,\r\n        entropy: 1,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: true,\r\n    },\r\n    manticore: {\r\n      name: \"Manticore\",\r\n      id: \"manticore\",\r\n      family: \"force\",\r\n      tier: 2,\r\n      requirements: {\r\n        force: 5,\r\n        entropy: 1,\r\n      },\r\n      rewards: {\r\n        force: 3,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: true,\r\n    },\r\n    scorpion: {\r\n      name: \"Scorpion\",\r\n      id: \"scorpion\",\r\n      family: \"force\",\r\n      tier: 2,\r\n      requirements: {\r\n        force: 4,\r\n        entropy: 2,\r\n      },\r\n      rewards: {\r\n        force: 2,\r\n      },\r\n      nodes: 4,\r\n      hasChoiceNode: true,\r\n    },\r\n    tiger: {\r\n      name: \"Tiger\",\r\n      id: \"tiger\",\r\n      family: \"force\",\r\n      tier: 2,\r\n      requirements: {\r\n        force: 4,\r\n        life: 2,\r\n      },\r\n      rewards: {\r\n        force: 2,\r\n      },\r\n      nodes: 4,\r\n      hasChoiceNode: true,\r\n    },\r\n    // FORCE TIER 3\r\n    conqueror: {\r\n      name: \"Conqueror\",\r\n      id: \"conqueror\",\r\n      family: \"force\",\r\n      tier: 3,\r\n      requirements: {\r\n        force: 7,\r\n        entropy: 1,\r\n        life: 5,\r\n      },\r\n      rewards: {\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    kraken: {\r\n      name: \"Kraken\",\r\n      id: \"kraken\",\r\n      family: \"force\",\r\n      tier: 3,\r\n      requirements: {\r\n        force: 7,\r\n        entropy: 5,\r\n        life: 1,\r\n      },\r\n      rewards: {\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    wrath: {\r\n      name: \"Wrath\",\r\n      id: \"wrath\",\r\n      family: \"force\",\r\n      tier: 3,\r\n      requirements: {\r\n        force: 8,\r\n        entropy: 3,\r\n        life: 2,\r\n      },\r\n      rewards: {\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    // ENTROPY TIER 1\r\n    core_entropy: {\r\n      name: \"Core (Entropy)\",\r\n      id: \"core_entropy\",\r\n      family: \"entropy\",\r\n      tier: 1,\r\n      requirements: {\r\n      },\r\n      rewards: {\r\n        entropy: 1,\r\n      },\r\n      nodes: 1,\r\n      hasChoiceNode: false,\r\n      isCoreNode: true,\r\n    },\r\n    crow: {\r\n      name: \"Crow\",\r\n      id: \"crow\",\r\n      family: \"entropy\",\r\n      tier: 1,\r\n      requirements: {\r\n        entropy: 1,\r\n      },\r\n      rewards: {\r\n        entropy: 3,\r\n        form: 1,\r\n      },\r\n      nodes: 3,\r\n      hasChoiceNode: false,\r\n    },\r\n    fly: {\r\n      name: \"Fly\",\r\n      id: \"fly\",\r\n      family: \"entropy\",\r\n      tier: 1,\r\n      requirements: {\r\n        entropy: 1,\r\n      },\r\n      rewards: {\r\n        entropy: 3,\r\n        form: 2,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    vulture: {\r\n      name: \"Vulture\",\r\n      id: \"vulture\",\r\n      family: \"entropy\",\r\n      tier: 1,\r\n      requirements: {\r\n        entropy: 1,\r\n      },\r\n      rewards: {\r\n        entropy: 3,\r\n        force: 2,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    wolf: {\r\n      name: \"Wolf\",\r\n      id: \"wolf\",\r\n      family: \"entropy\",\r\n      tier: 1,\r\n      requirements: {\r\n        entropy: 1,\r\n      },\r\n      rewards: {\r\n        entropy: 3,\r\n        force: 1,\r\n      },\r\n      nodes: 3,\r\n      hasChoiceNode: false,\r\n    },\r\n    // ENTROPY TIER 2\r\n    blood_ape: {\r\n      name: \"Blood Ape\",\r\n      id: \"blood_ape\",\r\n      family: \"entropy\",\r\n      tier: 2,\r\n      requirements: {\r\n        entropy: 3,\r\n        force: 1,\r\n        form: 2,\r\n      },\r\n      rewards: {\r\n        entropy: 2,\r\n        form: 1,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: true,\r\n    },\r\n    extinction: {\r\n      name: \"Extinction\",\r\n      id: \"extinction\",\r\n      family: \"entropy\",\r\n      tier: 2,\r\n      requirements: {\r\n        entropy: 4,\r\n        force: 2,\r\n      },\r\n      rewards: {\r\n        entropy: 2,\r\n      },\r\n      nodes: 4,\r\n      hasChoiceNode: true,\r\n    },\r\n    imp: {\r\n      name: \"Imp\",\r\n      id: \"imp\",\r\n      family: \"entropy\",\r\n      tier: 2,\r\n      requirements: {\r\n        entropy: 5,\r\n        form: 1,\r\n      },\r\n      rewards: {\r\n        entropy: 3,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: true,\r\n    },\r\n    hyena: {\r\n      name: \"Hyena\",\r\n      id: \"hyena\",\r\n      family: \"entropy\",\r\n      tier: 2,\r\n      requirements: {\r\n        entropy: 5,\r\n        force: 1,\r\n      },\r\n      rewards: {\r\n        entropy: 3,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: true,\r\n    },\r\n    supplicant: {\r\n      name: \"Supplicant\",\r\n      id: \"supplicant\",\r\n      family: \"entropy\",\r\n      tier: 2,\r\n      requirements: {\r\n        entropy: 4,\r\n        form: 2,\r\n      },\r\n      rewards: {\r\n        entropy: 2,\r\n      },\r\n      nodes: 4,\r\n      hasChoiceNode: true,\r\n    },\r\n    // ENTROPY TIER 3\r\n    death: {\r\n      name: \"Death\",\r\n      id: \"death\",\r\n      family: \"entropy\",\r\n      tier: 3,\r\n      requirements: {\r\n        entropy: 8,\r\n        force: 2,\r\n        form: 3,\r\n      },\r\n      rewards: {\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    decay: {\r\n      name: \"Decay\",\r\n      id: \"decay\",\r\n      family: \"entropy\",\r\n      tier: 3,\r\n      requirements: {\r\n        entropy: 7,\r\n        force: 5,\r\n        form: 1,\r\n      },\r\n      rewards: {\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    demilich: {\r\n      name: \"Demilich\",\r\n      id: \"demilich\",\r\n      family: \"entropy\",\r\n      tier: 3,\r\n      requirements: {\r\n        entropy: 7,\r\n        force: 1,\r\n        form: 5,\r\n      },\r\n      rewards: {\r\n      },\r\n      nodes: 6,\r\n      hasChoiceNode: false,\r\n    },\r\n    // FORM TIER 1\r\n    core_form: {\r\n      name: \"Core (Form)\",\r\n      id: \"core_form\",\r\n      family: \"form\",\r\n      tier: 1,\r\n      requirements: {\r\n      },\r\n      rewards: {\r\n        form: 1,\r\n      },\r\n      nodes: 1,\r\n      hasChoiceNode: false,\r\n      isCoreNode: true,\r\n    },\r\n    chalice: { // consume the cum chalice\r\n      name: \"Chalice\",\r\n      id: \"chalice\",\r\n      family: \"form\",\r\n      tier: 1,\r\n      requirements: {\r\n        form: 1,\r\n      },\r\n      rewards: {\r\n        form: 3,\r\n        inertia: 2,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    key: {\r\n      name: \"Key\",\r\n      id: \"key\",\r\n      family: \"form\",\r\n      tier: 1,\r\n      requirements: {\r\n        form: 1,\r\n      },\r\n      rewards: {\r\n        form: 3,\r\n        entropy: 2,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    nautilus: {\r\n      name: \"Nautilus\",\r\n      id: \"nautilus\",\r\n      family: \"form\",\r\n      tier: 1,\r\n      requirements: {\r\n        form: 1,\r\n      },\r\n      rewards: {\r\n        form: 3,\r\n        inertia: 1,\r\n      },\r\n      nodes: 3,\r\n      hasChoiceNode: false,\r\n    },\r\n    silkworm: {\r\n      name: \"Silkworm\",\r\n      id: \"silkworm\",\r\n      family: \"form\",\r\n      tier: 1,\r\n      requirements: {\r\n        form: 1,\r\n      },\r\n      rewards: {\r\n        form: 3,\r\n        entropy: 1,\r\n      },\r\n      nodes: 3,\r\n      hasChoiceNode: false,\r\n    },\r\n    // FORM TIER 2\r\n    basilisk: {\r\n      name: \"Basilisk\",\r\n      id: \"basilisk\",\r\n      family: \"form\",\r\n      tier: 2,\r\n      requirements: {\r\n        form: 4,\r\n        entropy: 2,\r\n      },\r\n      rewards: {\r\n        form: 2,\r\n      },\r\n      nodes: 4,\r\n      hasChoiceNode: true,\r\n    },\r\n    doppelganger: {\r\n      name: \"Doppelganger\",\r\n      id: \"doppelganger\",\r\n      family: \"form\",\r\n      tier: 2,\r\n      requirements: {\r\n        form: 5,\r\n        entropy: 1,\r\n      },\r\n      rewards: {\r\n        form: 3,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: true,\r\n    },\r\n    dragon: {\r\n      name: \"Dragon\",\r\n      id: \"dragon\",\r\n      family: \"form\",\r\n      tier: 2,\r\n      requirements: {\r\n        form: 5,\r\n        inertia: 1,\r\n      },\r\n      rewards: {\r\n        form: 3,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: true,\r\n    },\r\n    gryphon: {\r\n      name: \"Gryphon\",\r\n      id: \"gryphon\",\r\n      family: \"form\",\r\n      tier: 2,\r\n      requirements: {\r\n        form: 4,\r\n        inertia: 2,\r\n      },\r\n      rewards: {\r\n        form: 2,\r\n      },\r\n      nodes: 4,\r\n      hasChoiceNode: true,\r\n    },\r\n    wealth: {\r\n      name: \"Wealth\",\r\n      id: \"wealth\",\r\n      family: \"form\",\r\n      tier: 2,\r\n      requirements: {\r\n        form: 3,\r\n        inertia: 2,\r\n        entropy: 1,\r\n      },\r\n      rewards: {\r\n        form: 2,\r\n        inertia: 1,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: true,\r\n    },\r\n    // FORM TIER 3\r\n    cerberus: {\r\n      name: \"Cerberus\",\r\n      id: \"cerberus\",\r\n      family: \"form\",\r\n      tier: 3,\r\n      requirements: {\r\n        form: 7,\r\n        inertia: 5,\r\n        entropy: 1,\r\n      },\r\n      rewards: {\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    ritual: {\r\n      name: \"Ritual\",\r\n      id: \"ritual\",\r\n      family: \"form\",\r\n      tier: 3,\r\n      requirements: {\r\n        form: 7,\r\n        inertia: 1,\r\n        entropy: 5,\r\n      },\r\n      rewards: {\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    sphinx: {\r\n      name: \"Sphinx\",\r\n      id: \"sphinx\",\r\n      family: \"form\",\r\n      tier: 3,\r\n      requirements: {\r\n        form: 8,\r\n        inertia: 3,\r\n        entropy: 2,\r\n      },\r\n      rewards: {\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    // INERTIA TIER 1\r\n    core_inertia: {\r\n      name: \"Core (Inertia)\",\r\n      id: \"core_inertia\",\r\n      family: \"inertia\",\r\n      tier: 1,\r\n      requirements: {\r\n      },\r\n      rewards: {\r\n        inertia: 1,\r\n      },\r\n      nodes: 1,\r\n      hasChoiceNode: false,\r\n      isCoreNode: true,\r\n    },\r\n    armadillo: {\r\n      name: \"Armadillo\",\r\n      id: \"armadillo\",\r\n      family: \"inertia\",\r\n      tier: 1,\r\n      requirements: {\r\n        inertia: 1,\r\n      },\r\n      rewards: {\r\n        inertia: 3,\r\n        form: 1,\r\n      },\r\n      nodes: 3,\r\n      hasChoiceNode: false,\r\n    },\r\n    auroch: {\r\n      name: \"Auroch\",\r\n      id: \"auroch\",\r\n      family: \"inertia\",\r\n      tier: 1,\r\n      requirements: {\r\n        inertia: 1,\r\n      },\r\n      rewards: {\r\n        inertia: 3,\r\n        life: 1,\r\n      },\r\n      nodes: 3,\r\n      hasChoiceNode: false,\r\n    },\r\n    crab: {\r\n      name: \"Crab\",\r\n      id: \"crab\",\r\n      family: \"inertia\",\r\n      tier: 1,\r\n      requirements: {\r\n        inertia: 1,\r\n      },\r\n      rewards: {\r\n        inertia: 3,\r\n        life: 2,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    guardsman: {\r\n      name: \"Guardsman\",\r\n      id: \"guardsman\",\r\n      family: \"inertia\",\r\n      tier: 1,\r\n      requirements: {\r\n        inertia: 1,\r\n      },\r\n      rewards: {\r\n        inertia: 3,\r\n        form: 2,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    // INERTIA TIER 2\r\n    casque: {\r\n      name: \"Casque\",\r\n      id: \"casque\",\r\n      family: \"inertia\",\r\n      tier: 2,\r\n      requirements: {\r\n        inertia: 5,\r\n        life: 1,\r\n      },\r\n      rewards: {\r\n        inertia: 3,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: true,\r\n    },\r\n    centurion: {\r\n      name: \"Centurion\",\r\n      id: \"centurion\",\r\n      family: \"inertia\",\r\n      tier: 2,\r\n      requirements: {\r\n        inertia: 3,\r\n        form: 1,\r\n        life: 2,\r\n      },\r\n      rewards: {\r\n        inertia: 2,\r\n        life: 1,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: true,\r\n    },\r\n    gladiator: {\r\n      name: \"Gladiator\",\r\n      id: \"gladiator\",\r\n      family: \"inertia\",\r\n      tier: 2,\r\n      requirements: {\r\n        inertia: 3,\r\n        form: 3,\r\n      },\r\n      rewards: {\r\n        inertia: 2,\r\n        form: 1,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: true,\r\n    },\r\n    hippopotamus: {\r\n      name: \"Hippopotamus\",\r\n      id: \"hippopotamus\",\r\n      family: \"inertia\",\r\n      tier: 2,\r\n      requirements: {\r\n        inertia: 4,\r\n        life: 2,\r\n      },\r\n      rewards: {\r\n        inertia: 2,\r\n      },\r\n      nodes: 4,\r\n      hasChoiceNode: true,\r\n    },\r\n    rhinoceros: {\r\n      name: \"Rhinoceros\",\r\n      id: \"rhinoceros\",\r\n      family: \"inertia\",\r\n      tier: 2,\r\n      requirements: {\r\n        inertia: 4,\r\n        form: 2,\r\n      },\r\n      rewards: {\r\n        inertia: 2,\r\n      },\r\n      nodes: 4,\r\n      hasChoiceNode: true,\r\n    },\r\n    // INERTIA TIER 3\r\n    arena: {\r\n      name: \"Arena\",\r\n      id: \"arena\",\r\n      family: \"inertia\",\r\n      tier: 3,\r\n      requirements: {\r\n        inertia: 7,\r\n        life: 5,\r\n        form: 1,\r\n      },\r\n      rewards: {\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    champion: {\r\n      name: \"Champion\",\r\n      id: \"champion\",\r\n      family: \"inertia\",\r\n      tier: 3,\r\n      requirements: {\r\n        inertia: 8,\r\n        life: 3,\r\n        form: 2,\r\n      },\r\n      rewards: {\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    fortress: {\r\n      name: \"Fortress\",\r\n      id: \"fortress\",\r\n      family: \"inertia\",\r\n      tier: 3,\r\n      requirements: {\r\n        inertia: 7,\r\n        life: 1,\r\n        form: 5,\r\n      },\r\n      rewards: {\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    // LIFE TIER 1\r\n    core_life: {\r\n      name: \"Core (Life)\",\r\n      id: \"core_life\",\r\n      family: \"life\",\r\n      tier: 1,\r\n      requirements: {\r\n      },\r\n      rewards: {\r\n        life: 1,\r\n      },\r\n      nodes: 1,\r\n      hasChoiceNode: false,\r\n      isCoreNode: true,\r\n    },\r\n    beetle: {\r\n      name: \"Beetle\",\r\n      id: \"beetle\",\r\n      family: \"life\",\r\n      tier: 1,\r\n      requirements: {\r\n        life: 1,\r\n      },\r\n      rewards: {\r\n        life: 3,\r\n        force: 1,\r\n      },\r\n      nodes: 3,\r\n      hasChoiceNode: false,\r\n    },\r\n    hind: {\r\n      name: \"Hind\",\r\n      id: \"hind\",\r\n      family: \"life\",\r\n      tier: 1,\r\n      requirements: {\r\n        life: 1,\r\n      },\r\n      rewards: {\r\n        life: 3,\r\n        force: 2,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    lizard: {\r\n      name: \"Lizard\",\r\n      id: \"lizard\",\r\n      family: \"life\",\r\n      tier: 1,\r\n      requirements: {\r\n        life: 1,\r\n      },\r\n      rewards: {\r\n        life: 3,\r\n        inertia: 1,\r\n      },\r\n      nodes: 3,\r\n      hasChoiceNode: false,\r\n    },\r\n    rabbit: {\r\n      name: \"Rabbit\",\r\n      id: \"rabbit\",\r\n      family: \"life\",\r\n      tier: 1,\r\n      requirements: {\r\n        life: 1,\r\n      },\r\n      rewards: {\r\n        life: 3,\r\n        inertia: 2,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    // LIFE TIER 2\r\n    enchantress: {\r\n      name: \"Enchantress\",\r\n      id: \"enchantress\",\r\n      family: \"life\",\r\n      tier: 2,\r\n      requirements: {\r\n        life: 5,\r\n        force: 1,\r\n      },\r\n      rewards: {\r\n        life: 3,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: true,\r\n    },\r\n    huntress: {\r\n      name: \"Huntress\",\r\n      id: \"huntress\",\r\n      family: \"life\",\r\n      tier: 2,\r\n      requirements: {\r\n        life: 3,\r\n        force: 2,\r\n        inertia: 1,\r\n      },\r\n      rewards: {\r\n        life: 2,\r\n        force: 1,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: true,\r\n    },\r\n    nymph: {\r\n      name: \"Nymph\",\r\n      id: \"nymph\",\r\n      family: \"life\",\r\n      tier: 2,\r\n      requirements: {\r\n        life: 5,\r\n        inertia: 1,\r\n      },\r\n      rewards: {\r\n        life: 3,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: true,\r\n    },\r\n    pegasus: {\r\n      name: \"Pegasus\",\r\n      id: \"pegasus\",\r\n      family: \"life\",\r\n      tier: 2,\r\n      requirements: {\r\n        life: 4,\r\n        inertia: 2,\r\n      },\r\n      rewards: {\r\n        life: 2,\r\n      },\r\n      nodes: 4,\r\n      hasChoiceNode: true,\r\n    },\r\n    stag: {\r\n      name: \"Stag\",\r\n      id: \"stag\",\r\n      family: \"life\",\r\n      tier: 2,\r\n      requirements: {\r\n        life: 4,\r\n        force: 2,\r\n      },\r\n      rewards: {\r\n        life: 2,\r\n      },\r\n      nodes: 4,\r\n      hasChoiceNode: true,\r\n    },\r\n    // LIFE TIER 3\r\n    goddess: {\r\n      name: \"Goddess\",\r\n      id: \"goddess\",\r\n      family: \"life\",\r\n      tier: 3,\r\n      requirements: {\r\n        life: 7,\r\n        inertia: 5,\r\n        force: 1,\r\n      },\r\n      rewards: {\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    hope: {\r\n      name: \"Hope\",\r\n      id: \"hope\",\r\n      family: \"life\",\r\n      tier: 3,\r\n      requirements: {\r\n        life: 7,\r\n        inertia: 1,\r\n        force: 5,\r\n      },\r\n      rewards: {\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    splendor: {\r\n      name: \"Splendor\",\r\n      id: \"splendor\",\r\n      family: \"life\",\r\n      tier: 3,\r\n      requirements: {\r\n        life: 8,\r\n        inertia: 2,\r\n        force: 3,\r\n      },\r\n      rewards: {\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n  }","import React from 'react';\r\nimport './App.css';\r\nimport _ from \"lodash\"\r\nimport Tippy from '@tippyjs/react';\r\nimport 'tippy.js/dist/tippy.css';\r\nimport { aspects } from \"./Data.js\" // ascension data goes there\r\n\r\n// Hey\r\n// Relevant code is in filterApplicableAspects(), calculateShortestPath(), minMaxEmbodiments() and calculateV2() for the self-fuelling.\r\n// Whole thing is a mess atm; took me quite a lot of tinkering to get things working and I haven't cleaned up the code since. My apologies.\r\n\r\nconst strings = {\r\n  iterations: \"How many builds should be randomly generated. With higher amounts the search takes longer but is more likely to find the most efficient build. Keep this in the thousands, and increase it when you're doing crazy searches (3+ aspects chosen, multiple T3s, stuff like that).\",\r\n  useFullCore: \"Use a full Core instead of its lone nodes. A full Core grants 2 of each embodiment for 5 points.\",\r\n  selfSustain: \"If enabled, shows aspects which can be removed after completing the chosen aspects.\",\r\n  preference: \"Controls the scoring system for builds. The first option will make the search favor builds which require less points to sustain after removing all unnecessary aspects. The second option favors paths which require the least amount of points to reach, but may require more points to sustain.\",\r\n  considerDipping: \"If enabled, the search will include the possibility of 'dipping' into a tier 2 aspects to get the embodiment reward on their second node, for only 2 points. This is rarely ever useful for finding shortest paths. If you're using this, you should increase the 'builds to try' setting considerably.\",\r\n  mode: \"'Find shortest paths' gives you paths towards your chosen aspects that require the least amount of points to complete. 'Self-sustain' mode instead gives you a list of other aspects you need to pick in order to self-sustain the ones you chose, using the least amount of Ascension Points possible. 'Maximize Embodiments' gives you self-sustained builds that have the most amount of your chosen embodiments.\"\r\n}\r\n\r\nString.prototype.format = function () { // by gpvos from stackoverflow\r\n  var args = arguments;\r\n  return this.replace(/\\{(\\d+)\\}/g, function (m, n) { return args[n]; });\r\n};\r\n\r\n// calculate embodiments rewarded per Ascension point spent\r\nfor (var x in aspects) {\r\n  var aspect = aspects[x];\r\n  aspect.rewardsPerPoint = {};\r\n  aspect.totalRequirements = 0;\r\n\r\n  for (var y in aspect.rewards) {\r\n    aspect.rewardsPerPoint[y] = aspect.rewards[y] / aspect.nodes\r\n  }\r\n\r\n  // total embodiment req\r\n  for (var z in aspect.requirements) {\r\n    aspect.totalRequirements += aspect.requirements[z];\r\n  }\r\n}\r\n\r\n// Checkbox element for choosing aspects that supports 3 states: unselected, selected and excluded\r\nclass Checkbox extends React.Component {\r\n  toggle() {\r\n    if (this.props.app.state.selection.includes(this.props.data)) { // add or exclude if this is a t3 aspect or core node (cannot exclude those)\r\n      this.props.app.updateSelection(this.props.data, null)\r\n\r\n      if (!this.props.data.isCoreNode && this.props.data.tier != 3)\r\n        this.props.app.updateExclusion(this.props.data, null)\r\n    }\r\n    else if (this.props.app.state.excluded.includes(this.props.data)) { // exclude\r\n      this.props.app.updateExclusion(this.props.data, null)\r\n    }\r\n    else { // remove from selection\r\n      this.props.app.updateSelection(this.props.data, null);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var state = \"checkbox \";\r\n    var text = \"\"\r\n\r\n    // disable onClick if this is a core node and we're using full core\r\n    let onClick = (this.props.data.isCoreNode != undefined && this.props.app.state.useFullCore) ? null : () => this.toggle()\r\n\r\n    // css classes and text\r\n    if (this.props.data.isCoreNode != undefined && this.props.app.state.useFullCore) {\r\n      state += \"chk-grey\"\r\n      text = \"✓\"\r\n    }\r\n    else if (this.props.app.state.selection.includes(this.props.data)) {\r\n      state += \"chk-green\"\r\n      text = \"✓\"\r\n    }\r\n    else if (this.props.app.state.excluded.includes(this.props.data)) {\r\n      state += \"chk-red\"\r\n      text = \"✕\"\r\n    }\r\n\r\n    return (\r\n      <div className={\"unselectable \" + state + \" \" + (this.props.darkMode ? \"dark-mode-checkbox\" : \"\")} onClick={onClick}>\r\n        <p>{text}</p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n// element for choosing your desired embodiments for the minmax-embodiments mode\r\nclass EmbodimentSelector extends React.Component {\r\n  render() {\r\n    // new object to replace the state one\r\n    // changing nested objects in states is not really supported so this is a workaround\r\n    let embs = {\r\n      force: this.props.app.state.minMaxEmbodiments.force,\r\n      entropy: this.props.app.state.minMaxEmbodiments.entropy,\r\n      form: this.props.app.state.minMaxEmbodiments.form,\r\n      inertia: this.props.app.state.minMaxEmbodiments.inertia,\r\n      life: this.props.app.state.minMaxEmbodiments.life,\r\n    }\r\n    embs[this.props.type] = !this.props.app.state.minMaxEmbodiments[this.props.type]\r\n\r\n    return (<div className=\"flexbox-horizontal\">\r\n      <input type=\"checkbox\" checked={this.props.app.state.minMaxEmbodiments[this.props.type]} onChange={(e) => this.props.app.setState({minMaxEmbodiments: embs})}></input>\r\n      <p className={this.props.app.state.darkMode ? \"dark-mode-text\" : \"\"}>{this.props.text}</p>\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\n// embodiment icon component\r\nclass Embodiment extends React.Component {\r\n  render() {\r\n    return (\r\n    <div className={\"embodiment \" + this.props.type + ((this.props.darkMode) ? \" dark-mode-embodiment\" : \" \")}>\r\n      <p className={(this.props.darkMode ? \"dark-mode-text\" : \"\")}>{this.props.amount}</p>\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\n// component for displaying selectable aspects\r\nclass Aspect extends React.Component {\r\n  getRequirementsText() { // create embodiment icons for the requirements\r\n    var elements = [];\r\n\r\n    for (var x in this.props.data.requirements) {\r\n      var amount = this.props.data.requirements[x]\r\n      var element;\r\n      var type = x; // serves to figure out css class; each embodiment type has a different border color\r\n      let darkMode = (this.props.darkMode)\r\n\r\n      element = <Embodiment key={x} darkMode={darkMode} type={type} amount={amount}/>\r\n      elements.push(element);\r\n    }\r\n\r\n    return elements;\r\n  }\r\n\r\n  getRewards() { // get text for aspect rewards, used in the tooltip\r\n    var text = [];\r\n    var embs = {\r\n      force: 0,\r\n      entropy: 0,\r\n      form: 0,\r\n      inertia: 0,\r\n      life: 0,\r\n    }\r\n\r\n    for (let x in this.props.data.rewards) {\r\n      var amount = this.props.data.rewards[x]\r\n      embs[x] = amount;\r\n    }\r\n\r\n    // don't even show the header for tier 3 aspects, as they don't ever offer rewards\r\n    let header = (this.props.data.tier != 3) ? \"Completion rewards:\" : \"\";\r\n    for (let z in embs) {\r\n      if (embs[z] != 0)\r\n        text.push(<p key={this.props.data.name + \"_tooltip_\" + z}>{embs[z] + \" \" + capitalizeFirstLetter(z)}</p>);\r\n    }\r\n\r\n    return <div>\r\n      <p>{header}</p>\r\n      <div>{text}</div>\r\n    </div>;\r\n  }\r\n\r\n  getTooltip() { // gets the tooltip for this aspect\r\n    let name = this.props.data.name\r\n    let cost = this.props.data.nodes;\r\n    let rewards = this.getRewards();\r\n    let nodeText = ((this.props.data.nodes > 1) ? \" ({0} nodes)\" : \" ({0} node)\").format(cost)\r\n    \r\n    // note to self, dont nest <p> elements accidentally. bad stuff happens\r\n    return (<div className=\"tooltip\">\r\n        <p className=\"tooltip\">{name + nodeText}<br /></p>\r\n        {rewards}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Tippy content={this.getTooltip()} placement=\"bottom\" duration=\"0\">\r\n        <div className=\"aspect unselectable\">\r\n          <Checkbox data={this.props.data} app={this.props.app} darkMode={this.props.darkMode}></Checkbox>\r\n          <p className={(this.props.darkMode ? \"dark-mode-text\" : \"\")}>{this.props.data.name}</p>\r\n          <div className=\"embodiments-box\">\r\n            {this.getRequirementsText()}\r\n          </div>\r\n        </div>\r\n      </Tippy>\r\n    )\r\n  }\r\n}\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      selection: [], // chosen aspects\r\n      excluded: [], // excluded aspects\r\n      result: null, // search outcome object\r\n      useFullCore: false,\r\n      considerDipping: false, // consider dipping t2s. currently disabled\r\n      selfSustain: true,\r\n      preference: \"0\", // scoring mode\r\n      iterations: 4000, // how many random builds are generated and compared\r\n      maximumOutputs: 10, // maximum path results shown\r\n      resultIndex: 0, // currently displayed result index\r\n      darkMode: false,\r\n      mode: \"fastest\",\r\n      minMaxEmbodiments: {\r\n        force: false,\r\n        entropy: false,\r\n        form: false,\r\n        inertia: false,\r\n        life: false,\r\n      },\r\n      maxPoints: 26,\r\n    }\r\n\r\n    // dark mode is saved between sessions\r\n    if (window.localStorage.getItem(\"darkMode\") == \"true\")\r\n      this.state.darkMode = true;\r\n  }\r\n\r\n  // switch between the different results\r\n  changeIndex(change) {\r\n    let current = this.state.resultIndex;\r\n    current += change;\r\n    if (current > this.state.result.bestBuilds.length-1)\r\n      current = 0;\r\n    else if (current < 0)\r\n      current = this.state.result.bestBuilds.length-1;\r\n\r\n    this.setState({\r\n      resultIndex: current,\r\n    })\r\n  }\r\n\r\n  // gets a list of the selected embodiments for the minmax-embodiments mode\r\n  getMinMaxEmbodiments() {\r\n    let list = []\r\n    for (let x in this.state.minMaxEmbodiments) {\r\n      if (this.state.minMaxEmbodiments[x])\r\n        list.push(x)\r\n    }\r\n    return list;\r\n  }\r\n\r\n  filterApplicableAspects(list) { // list is chosen aspects\r\n    /*\r\n      This method is called before starting a search.\r\n      Its purpose is to filter out aspects that we are 100% sure\r\n      will not be useful to the search,\r\n      or are excluded by the user.\r\n      An example of this would be aspects that ONLY grant form,\r\n      while we're searching for paths that do not require form.\r\n    */\r\n\r\n    var realList = []; // list of aspects that will be used in the search\r\n    var excludedAspects = []; // list of IDs of excluded aspects\r\n    for (var n = 0; n < this.state.excluded.length; n++) {\r\n      excludedAspects.push(this.state.excluded[n].id)\r\n    }\r\n    \r\n    for (var x = 0; x < list.length; x++) {\r\n      var aspect = list[x];\r\n\r\n      // exclude individual core nodes if we're using full core\r\n      if (aspect.isCoreNode != undefined && this.state.useFullCore) {\r\n\r\n      }\r\n      else\r\n        realList.push(aspect); \r\n    }\r\n\r\n    // add the full core to the list of user chosen aspects if we're using it\r\n    if (this.state.useFullCore) {\r\n      realList.push(aspects.core_full);\r\n    }\r\n\r\n    list = realList;\r\n\r\n    var newList = {}\r\n    var reqs = {\r\n      force: 0,\r\n      entropy: 0,\r\n      form: 0,\r\n      inertia: 0,\r\n      life: 0,\r\n    }\r\n\r\n    // check what embodiment types we need\r\n    for (var z in list) {\r\n      var aspect = list[z];\r\n\r\n      reqs.force = (aspect.requirements.force > reqs.force) ? aspect.requirements.force : reqs.force;\r\n\r\n      reqs.entropy = (aspect.requirements.entropy > reqs.entropy) ? aspect.requirements.entropy : reqs.entropy;\r\n\r\n      reqs.form = (aspect.requirements.form > reqs.form) ? aspect.requirements.form : reqs.form;\r\n\r\n      reqs.inertia = (aspect.requirements.inertia > reqs.inertia) ? aspect.requirements.inertia : reqs.inertia;\r\n\r\n      reqs.life = (aspect.requirements.life > reqs.life) ? aspect.requirements.life : reqs.life;\r\n    }\r\n\r\n    // checks if an aspect has any relevant award compared against a list of requirements\r\n    function hasRelevantReward(aspect, reqs) {\r\n      for (var x in aspect.rewards) {\r\n        var reward = aspect.rewards[x];\r\n\r\n        // if it's excluded, it's not relevant\r\n        if (excludedAspects.includes(aspect.id))\r\n          return false;\r\n\r\n        // more exclusions based on settings\r\n        if (aspect.dipping && !this.state.considerDipping)\r\n          return false;\r\n\r\n        // core handling\r\n        if (aspect.id == \"core_full\" && !this.state.useFullCore)\r\n          return false;\r\n        else if (aspect.isCoreNode && this.state.useFullCore)\r\n          return false;\r\n\r\n        // filter out t2 variants that don't have a relevant +emb\r\n        // is this used anymore? TODO remove\r\n        if (aspect.generated != undefined && reqs[aspect.extraEmbodimentType] == 0)\r\n          return false;\r\n\r\n        // if an aspect rewards a type of embodiment we need, it's valid. Otherwise we discard it\r\n        if (reward > 0 && reqs[x] > 0)\r\n          return true;\r\n      }\r\n\r\n      return false;\r\n    }\r\n\r\n    for (var x in aspects) {\r\n      var aspect = aspects[x];\r\n\r\n      const func = hasRelevantReward.bind(this);\r\n      if (func(aspect, reqs)) {\r\n        newList[x] = aspect;\r\n      }\r\n    }\r\n\r\n    // make sure the aspects we have chosen don't get filtered out.\r\n    // this doesn't do shit right? TODO remove\r\n    for (var y in list) {\r\n      if (!newList.hasOwnProperty(list[y].id))\r\n        newList[list[y].id] = list[y];\r\n    }\r\n\r\n    var highestReq = 0;\r\n    var aspectWithHighestRequirements;\r\n\r\n    for (var i in newList) {\r\n      if (newList[i].totalRequirements > highestReq)\r\n        aspectWithHighestRequirements = newList[i];\r\n    }\r\n\r\n    var chosenAspects = {}; // turn it into object and filter out irrelevant t2 variants\r\n    // no longer needed. TODO REMOVE\r\n    for (var b = 0; b < list.length; b++) {\r\n      var asp = list[b]\r\n      if ((asp.generated != undefined && reqs[asp.extraEmbodimentType] == 0) || asp.dipping != undefined) {\r\n        //console.log(\"unneeded \" + asp.name)\r\n      }\r\n      else\r\n        chosenAspects[b] = list[b];\r\n    }\r\n\r\n    this.setState({\r\n      waiting: true,\r\n    })\r\n\r\n    return {\r\n      reqs: reqs,\r\n      aspects: newList,\r\n      chosenAspects: chosenAspects,\r\n      aspectWithHighestRequirements: aspectWithHighestRequirements,\r\n    };\r\n  }\r\n\r\n  async calculateShortestPath() {\r\n    var data = this.filterApplicableAspects(this.state.selection);\r\n    data.chosenAspects = _.cloneDeep(data.chosenAspects)\r\n\r\n    // quit if nothing was selected\r\n    if (Object.keys(data.chosenAspects).length == 0)\r\n      return;\r\n\r\n    // warn if the user has excluded a lot of aspects\r\n    if (this.state.excluded.length >= 6)\r\n      if (!window.confirm(\"You've excluded a lot of aspects. I haven't implemented failsafes for that so if you continue, the webpage may freeze if there is literally no way to build towards the goal. Just a warnin'.\"))\r\n        return;\r\n\r\n    // is this needed? it's not even reshuffled every iteration\r\n    var chosenAspects = [] // we \"shuffle\" this.\r\n    var buildWithChosenAspects = [];\r\n    for (let x in data.chosenAspects) {\r\n      chosenAspects.push(data.chosenAspects[x]);\r\n      buildWithChosenAspects.push(data.chosenAspects[x])\r\n    }\r\n\r\n    var builds = []; // actually paths\r\n\r\n    for (let x = 0; x < this.state.iterations; x++) {\r\n      var build = [];\r\n      var maxPoints = 0;\r\n      var currentPoints = 0;\r\n      var path = [];\r\n      let keys = 0;\r\n      let chosenAspects = _.cloneDeep(buildWithChosenAspects);\r\n      let aspects = _.cloneDeep(data.aspects);\r\n      let partialT2s = [];\r\n\r\n      function changePoints(delta) {\r\n        currentPoints += delta;\r\n        if (currentPoints > maxPoints)\r\n          maxPoints = currentPoints;\r\n      }\r\n\r\n      function addPartialT2(asp, embBonus=null) {\r\n        let realAsp = _.cloneDeep(asp)\r\n        if (embBonus == null) {\r\n  \r\n        }\r\n        else {\r\n          realAsp.rewards = {}\r\n          realAsp.rewards[embBonus] = 1;\r\n          realAsp.name += \" (partial, \" + embBonus + \")\"\r\n        }\r\n        realAsp.nodes = 2;\r\n        realAsp.fullAspect = asp;\r\n\r\n        partialT2s.push(realAsp)\r\n        build.push(realAsp);\r\n        path.push({\r\n          aspect: realAsp,\r\n          role: (isChosenNode(asp)) ? \"goal\" : \"removable\"\r\n        })\r\n        changePoints(realAsp.nodes);\r\n\r\n        // immediately check for stuff we can remove after reaching the emb node\r\n        checkForRemovals(true)\r\n      }\r\n\r\n      function isChosenNode(asp) {\r\n        for (let x in chosenAspects) {\r\n          if (chosenAspects[x].id == asp.id)\r\n            return true;\r\n        }\r\n        return false;\r\n      }\r\n\r\n      // check if removing an aspect would still keep requirements for goals in a build\r\n      function fullfillsGoalsIfRemoved(build, goals, asp) {\r\n        // this used to be just goals\r\n        let reqs = getTotalReqs(goals.concat(build), true)\r\n        let goalReqs = getTotalReqs(goals, true)\r\n        let newBuild = build.filter((x) => {return x != asp})\r\n        let rews = getTotalRewards(newBuild)\r\n\r\n        // filter out reqs that are not relevant to goals\r\n        for (let x in reqs) {\r\n          if (goalReqs[x] == undefined) {\r\n            delete reqs[x]\r\n          }\r\n        }\r\n\r\n        for (let x in reqs) {\r\n          if (rews[x] < reqs[x])\r\n            return false;\r\n        }\r\n        return true;\r\n      }\r\n\r\n      function checkForRemovals(removeT1s=true) {\r\n        // todo we should somehow prioritize removing asps that have more nodes\r\n        let newPath = path.slice()\r\n        newPath.reverse()\r\n        for (let x in newPath) {\r\n          if (newPath[x].role == \"removable\") {\r\n            let asp = newPath[x].aspect;\r\n\r\n            if (((asp.isCoreNode == undefined) || removeT1s) && (asp.tier != 2 || asp.fullAspect != undefined)) {\r\n              // if we're overflowing reqs, check if we can remove this aspect\r\n              let rews = getTotalRewards(build, false, true)\r\n              let reqs = getTotalReqs(chosenAspects, true)\r\n\r\n              let overflowed = false;\r\n\r\n              for (let z in reqs) { // iterate through reqs not rews, otherwise irrelevant embs get in the way\r\n                if (rews[z] > reqs[z]) {\r\n                  overflowed = true;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              if (overflowed) {\r\n                // if this is a t2 thing, it needs special consideration due to them being split up\r\n                if (asp.tier == 2) {\r\n                  // merge partial and full\r\n                  let buildWithoutSplitT2 = build.filter((x) => {return x != asp && x.name != asp.fullAspect.name + \" (complete)\"})\r\n                  let realFullAspect = _.cloneDeep(asp.fullAspect)\r\n\r\n                  // add emb bonus\r\n                  for (let x in asp.rewards) {\r\n                    realFullAspect.rewards[x] += 1;\r\n                  }\r\n\r\n                  buildWithoutSplitT2.push(realFullAspect)\r\n\r\n                  if (fullfillsGoalsIfRemoved(buildWithoutSplitT2, chosenAspects, realFullAspect)) {\r\n                    // filter full\r\n                    let full;\r\n                    let ind;\r\n                    for (let x in path) {\r\n                      if (path[x].aspect.name == asp.fullAspect.name + \" (complete)\") {\r\n                        full = path[x].aspect;\r\n                        ind = x;\r\n                      }\r\n                    }\r\n                    path[ind].role = \"removable-removed\"\r\n                    path.push({\r\n                      aspect: full,\r\n                      role: \"remove\"\r\n                    })\r\n                    // does this work??\r\n                    build = build.filter((x) => {return x.name != full.name})\r\n                    changePoints(-asp.nodes)\r\n\r\n                    // filter partial\r\n                    path[newPath.length - 1 - x].role = \"removable-removed\"\r\n                    path.push({\r\n                      aspect: asp,\r\n                      role: \"remove\"\r\n                    })\r\n                    // does this work??\r\n                    build = build.filter((x) => {return x.name != asp.name})\r\n                    changePoints(-asp.nodes)\r\n\r\n                    console.log(build)\r\n                  }\r\n                }\r\n                else if (fullfillsGoalsIfRemoved(build, chosenAspects, asp)) {\r\n                  // change the role of this path element so we don't do this procedure on it again\r\n                  path[newPath.length - 1 - x].role = \"removable-removed\"\r\n                  path.push({\r\n                    aspect: asp,\r\n                    role: \"remove\"\r\n                  })\r\n                  // does this work??\r\n                  build = build.filter((x) => {return x.name != asp.name})\r\n                  changePoints(-asp.nodes)\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // choosing asps\r\n      for (let x = 0; x < 1000; x++) {\r\n        let ignoreStep = false;\r\n\r\n        // try to remove stuff\r\n        // check if we overflowed anything, then try to remove. also do this whenever we add a partial t2\r\n        checkForRemovals(false) // alright boys, ignoring T1s here finally fixed doppel bug\r\n\r\n        // check if we can complete a partial t2\r\n        let partialT2sToRemove = []\r\n        for (let z in partialT2s) {\r\n          let asp = _.cloneDeep(partialT2s[z].fullAspect)\r\n          let isChosen = isChosenNode(asp)\r\n          asp.nodes = asp.nodes - 2;\r\n          asp.name += \" (complete)\"\r\n\r\n          build.push(asp)\r\n          path.push({\r\n            aspect: asp,\r\n            role: isChosen ? \"goal\" : \"removable\"\r\n          })\r\n          changePoints(asp.nodes);\r\n\r\n          partialT2sToRemove.push(partialT2s[z])\r\n\r\n          // this is new\r\n          checkForRemovals(true)\r\n\r\n          if (isChosen)\r\n            keys++;\r\n        }\r\n        partialT2s = partialT2s.filter((x) => {return !partialT2sToRemove.includes(x)})\r\n\r\n        // check if we can pick the chosen asps now\r\n        for (let z in chosenAspects) {\r\n          let chosenAsp = chosenAspects[z];\r\n          if (fullfillsRequirements(build, [chosenAsp]) && !includesAspect(build, chosenAsp)) {\r\n            if (chosenAsp.tier == 2) {\r\n              let relevantEmbodiments = getTotalReqs(chosenAspects, true)\r\n              \r\n              addPartialT2(chosenAsp, _.sample(Object.keys(relevantEmbodiments)))\r\n            }\r\n            else {\r\n              build.push(chosenAsp)\r\n              path.push({\r\n                aspect: chosenAsp,\r\n                role: \"goal\",\r\n              });\r\n              changePoints(chosenAsp.nodes);\r\n              keys++;\r\n            }\r\n            ignoreStep = true;\r\n          }\r\n        }\r\n\r\n        // throw out garbo builds that never went anywhere\r\n        if (path.length > 25)\r\n          break;\r\n\r\n        if (!ignoreStep) {\r\n          // build complete\r\n          if (keys == chosenAspects.length) {\r\n            checkForRemovals(true)\r\n\r\n            let finalBuild = {\r\n              path: path,\r\n              build: build,\r\n              maxPoints: maxPoints,\r\n              points: currentPoints,\r\n            }\r\n            builds.push(finalBuild);\r\n            break;\r\n          }\r\n\r\n          // else pick randoms\r\n          let asp = _.sample(aspects);\r\n          let remainingReqs = getRemainingReqs2(build, chosenAspects, true);\r\n          let relevantEmbodiments = getRelevantEmbs(build, chosenAspects)\r\n\r\n          if (hasRelevantRewards(asp, remainingReqs) && !includesAspect(build, asp) && fullfillsRequirements(build, [asp])) {\r\n            if (asp.tier == 2) {\r\n              let embBonus = _.sample(relevantEmbodiments)\r\n\r\n              // get the partial t2 first, then add a check for completing them outside this loop?\r\n              if (embBonus != undefined) {\r\n                addPartialT2(asp, embBonus)\r\n              }\r\n            }\r\n            else {\r\n              build.push(asp);\r\n\r\n              path.push({\r\n                aspect: asp,\r\n                role: \"removable\"\r\n              })\r\n              changePoints(asp.nodes);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    var bestBuilds = [];\r\n    var bestPoints = null;\r\n    for (let x in builds) { // filter them down to the most point-efficient ones\r\n      let pointsNeeded = builds[x].maxPoints\r\n\r\n      if (bestBuilds.length == 0) {\r\n        bestBuilds.push(builds[x]);\r\n        bestPoints = pointsNeeded;\r\n      }\r\n      else if (pointsNeeded < bestPoints) {\r\n        bestBuilds = [builds[x]];\r\n        bestPoints = pointsNeeded;\r\n      }\r\n      else if (pointsNeeded == bestPoints && bestBuilds.length <= this.state.maximumOutputs) {\r\n        bestBuilds.push(builds[x]);\r\n      }\r\n    }\r\n\r\n    console.log(bestBuilds);\r\n    console.log(bestPoints)\r\n\r\n    if (bestBuilds.length == 0) {\r\n      console.log(\"No results found. Try again and/or increase the 'builds to try' setting.\")\r\n    }\r\n    else {\r\n      this.setState({result: {\r\n        bestBuilds: filterDuplicatePaths(bestBuilds),\r\n        buildPoints: bestPoints,\r\n        pointsNeeded: bestPoints,\r\n      }})\r\n    }\r\n  }\r\n\r\n  async calculateV2() {\r\n    // step 1: make a list of relevant aspects and gather the total embodiment requirements\r\n    var data = this.filterApplicableAspects(this.state.selection);\r\n    data.chosenAspects = _.cloneDeep(data.chosenAspects)\r\n    \r\n    // quit if nothing was selected\r\n    if (Object.keys(data.chosenAspects).length == 0)\r\n      return;\r\n\r\n    // warn if the user has excluded a lot of aspects\r\n    if (this.state.excluded.length >= 6)\r\n      if (!window.confirm(\"You've excluded a lot of aspects. I haven't implemented failsafes for that so if you continue, the webpage may freeze if there is literally no way to build towards the goal. Just a warnin'.\"))\r\n        return;\r\n    \r\n    var reqs = getTotalReqs(data.chosenAspects);\r\n\r\n    var relevantEmbodiments = []; // works\r\n    for (let x in reqs) {\r\n      if (reqs[x] > 0)\r\n        relevantEmbodiments.push(x);\r\n    }\r\n\r\n    var chosenAspects = [] // we \"shuffle\" this.\r\n    var buildWithChosenAspects = [];\r\n    for (let x in data.chosenAspects) {\r\n      chosenAspects.push(data.chosenAspects[x]);\r\n      buildWithChosenAspects.push(data.chosenAspects[x])\r\n    }\r\n\r\n    var validBuilds = []; // valid self-sustainable builds\r\n\r\n    console.log(data.aspects);\r\n\r\n    // new build\r\n    for (let x = 0; x < this.state.iterations; x++) {\r\n      let chosenAspects = _.cloneDeep(buildWithChosenAspects);\r\n      let aspects = _.cloneDeep(data.aspects);\r\n      //var selfSustainBuild = [...buildWithChosenAspects]\r\n      var selfSustainBuild = [];\r\n\r\n      for (let x in chosenAspects) {\r\n        let asp = chosenAspects[x]\r\n        if (asp.tier == 2) {\r\n          let embBonus = _.sample(relevantEmbodiments)\r\n\r\n          asp.rewards[embBonus] = (asp.rewards[embBonus] == undefined) ? 1 : asp.rewards[embBonus] + 1;\r\n          asp.name += \" (+\" + embBonus + \")\"\r\n        }\r\n        selfSustainBuild.push(asp);\r\n      }\r\n\r\n      for (let x = 0; x < 1000; x++) { // getting rest of aspects needed to selfsustain\r\n        if (selfSustainBuild.length >= 10)\r\n          break;\r\n\r\n        let reqs = getRemainingReqs(selfSustainBuild);\r\n\r\n        // check if we're done\r\n        if (fullfillsRequirements(selfSustainBuild)) {\r\n          // if (!validBuilds.includes(selfSustainBuild)) // no idea if this works\r\n          validBuilds.push(selfSustainBuild);\r\n          break;\r\n        }\r\n        else { // else pick random asp and check again\r\n          let asp = _.sample(aspects);\r\n\r\n          if (hasRelevantRewards(asp, reqs) && !includesAspect(selfSustainBuild, asp)) {\r\n            if (asp.tier == 2) {\r\n              let embBonus = _.sample(relevantEmbodiments)\r\n\r\n              if (embBonus != undefined) {\r\n                asp.rewards[embBonus] = (asp.rewards[embBonus] == undefined) ? 1 : asp.rewards[embBonus] + 1;\r\n                asp.name += \" (+\" + embBonus + \")\"\r\n\r\n                selfSustainBuild.push(asp);\r\n              }\r\n            }\r\n            else {\r\n              selfSustainBuild.push(asp);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    var bestBuilds = [];\r\n    var bestPoints = null;\r\n    for (let x in validBuilds) { // filter them down to the most point-efficient ones\r\n      let build = validBuilds[x]\r\n      let pointsNeeded = getTotalPoints(build)\r\n\r\n      if (bestBuilds.length == 0) {\r\n        bestBuilds.push(build);\r\n        bestPoints = pointsNeeded;\r\n      }\r\n      else if (pointsNeeded < bestPoints) {\r\n        bestBuilds = [build];\r\n        bestPoints = pointsNeeded;\r\n      }\r\n      else if (pointsNeeded == bestPoints && bestBuilds.length <= this.state.maximumOutputs) {\r\n        bestBuilds.push(build);\r\n      }\r\n    }\r\n\r\n    console.log(bestBuilds);\r\n    console.log(bestPoints);\r\n\r\n    var bestPaths = [];\r\n    var bestPathsPoints = null;\r\n\r\n    // this is where we actually make paths\r\n    for (let x in bestBuilds) { // todo: revise if it rand picks the same way of calcV1, then filter the fastest paths\r\n      break; // haha sike not anymore\r\n      let keyAspects = bestBuilds[x];\r\n      let aspects = _.cloneDeep(data.aspects);\r\n      let path = [];\r\n      let build = [];\r\n      let keys = 0;\r\n\r\n      for (let z = 0; z < this.state.iterations/3; z++) {\r\n        for (let c in keyAspects) {\r\n          let asp = keyAspects[c]\r\n          if (fullfillsRequirements(build, [asp]) && !includesAspect(build, asp)) {\r\n            console.log(\"picked \" + asp.name + \" (goal) because reqs were fulfilled\")\r\n\r\n            build.push(asp);\r\n            path.push({\r\n              aspect: asp,\r\n              role: (includesAspect(data.chosenAspects, asp)) ? \"goal\" : \"key\", // todo distinguish goal and key\r\n            });\r\n\r\n            keys++;\r\n          }\r\n        }\r\n\r\n        // check if we got everything\r\n        if (keys === keyAspects.length) {\r\n          break;\r\n        }\r\n        else {\r\n          let asp = _.sample(aspects);\r\n          let relevantEmbodiments = getRemainingReqs(keyAspects, true);\r\n          // let relevantEmbodiments = getRemainingReqs(build); // this was a problem, we're checking the reqs of what we're building...\r\n\r\n          if (hasRelevantRewards(asp, reqs) && !includesAspect(build, asp) && fullfillsRequirements(build, [asp])) {\r\n            if (asp.tier == 2) {\r\n              let embBonus = _.sample(relevantEmbodiments)\r\n\r\n              //console.log(embBonus)\r\n\r\n              if (embBonus != undefined) {\r\n                asp.rewards[embBonus] = (asp.rewards[embBonus] == undefined) ? 1 : asp.rewards[embBonus] + 1;\r\n                asp.name += \" (+\" + embBonus + \")\"\r\n\r\n                build.push(asp);\r\n\r\n                path.push({\r\n                  aspect: asp,\r\n                  role: \"removable\"\r\n                })\r\n              }\r\n            }\r\n            else {\r\n              build.push(asp);\r\n\r\n              path.push({\r\n                aspect: asp,\r\n                role: \"removable\"\r\n              })\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      for (let z = 0; z < path.length; z++) {\r\n        if (path[z].role == \"removable\") {\r\n          path.push({\r\n            aspect: path[z].aspect,\r\n            role: \"remove\",\r\n          })\r\n        }\r\n      }\r\n\r\n      let points = getTotalPoints(build);\r\n\r\n      if (bestPaths.length == 0) {\r\n        bestPaths.push(path);\r\n        bestPathsPoints = points;\r\n      }\r\n      else if (points < bestPathsPoints) {\r\n        bestPaths = [path];\r\n        bestPathsPoints = points;\r\n      }\r\n      else if (points == bestPathsPoints) {\r\n        bestPaths.push(path);\r\n      }\r\n    }\r\n\r\n    bestPaths = filterDuplicatePaths(bestPaths)\r\n    bestBuilds = filterDuplicateBuilds(bestBuilds)\r\n\r\n    // var pathIds = []\r\n    // var duplicates = []\r\n\r\n    // // filter out duplicates\r\n    // for (let x in bestPaths) {\r\n    //   let pathId = []\r\n\r\n    //   for (let z in bestPaths[x]) {\r\n    //     let asp = bestPaths[x][z].aspect;\r\n    //     pathId.push(asp.id)\r\n    //   }\r\n\r\n    //   pathId.sort();\r\n\r\n    //   if (pathIds.length == 0)\r\n    //     pathIds.push(pathId)\r\n    //   else {\r\n    //     for (let z in pathIds) {\r\n    //       if (pathIds[z] == pathId) {\r\n    //         pathIds.push(pathId)\r\n    //       }\r\n    //       else {\r\n    //         duplicates.push(bestPaths[x])\r\n    //       }\r\n    //     }\r\n    //   }\r\n    \r\n    // }\r\n\r\n    // bestPaths = bestPaths.filter(function(item){\r\n    //   return !duplicates.includes(item);\r\n    // })\r\n\r\n    // console.log(\"Paths:\")\r\n    // console.log(bestPaths)\r\n\r\n    // var result = {\r\n    //   bestBuilds: bestBuilds,\r\n    //   buildPoints: bestPoints,\r\n    //   selfSustainPoints: bestPoints,\r\n    //   bestPaths: bestPaths,\r\n    //   pathPoints: bestPathsPoints,\r\n    // }\r\n\r\n    let result = {\r\n      bestBuilds: bestBuilds,\r\n      buildPoints: bestPoints,\r\n      pointsNeeded: bestPoints,\r\n    }\r\n\r\n    //return result;\r\n    this.setState({\r\n      result: result,\r\n      resultIndex: 0,\r\n    })\r\n  }\r\n\r\n  async minMaxEmbodiments() {\r\n    var data = this.filterApplicableAspects(this.state.selection);\r\n    data.chosenAspects = _.cloneDeep(data.chosenAspects)\r\n    \r\n    // quit if nothing was selected\r\n    if (Object.keys(data.chosenAspects).length == 0)\r\n      return;\r\n\r\n    let hasChosenAnyEmbs = false;\r\n    for (let x in this.state.minMaxEmbodiments) {\r\n      if (this.state.minMaxEmbodiments[x] == true) {\r\n        hasChosenAnyEmbs = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    // quit if user has not selected any embodiments\r\n    if (!hasChosenAnyEmbs) {\r\n      alert(\"You must choose at least 1 embodiment type that you want to pursue.\")\r\n      return;\r\n    }\r\n\r\n    // warn if the user has excluded a lot of aspects\r\n    if (this.state.excluded.length >= 6)\r\n      if (!window.confirm(\"You've excluded a lot of aspects. I haven't implemented failsafes for that so if you continue, the webpage may freeze if there is literally no way to build towards the goal. Just a warnin'.\"))\r\n        return;\r\n    \r\n    var reqs = getTotalReqs(data.chosenAspects);\r\n\r\n    var relevantEmbodiments = [];\r\n    for (let x in reqs) {\r\n      if (reqs[x] > 0)\r\n        relevantEmbodiments.push(x);\r\n    }\r\n\r\n    var chosenAspects = [] // we \"shuffle\" this.\r\n    var buildWithChosenAspects = [];\r\n    for (let x in data.chosenAspects) {\r\n      chosenAspects.push(data.chosenAspects[x]);\r\n      buildWithChosenAspects.push(data.chosenAspects[x])\r\n    }\r\n\r\n    var validBuilds = []; // valid self-sustainable builds\r\n\r\n    console.log(data.aspects);\r\n\r\n    // new build\r\n    for (let x = 0; x < this.state.iterations; x++) {\r\n      let chosenAspects = _.cloneDeep(buildWithChosenAspects);\r\n      let aspects = _.cloneDeep(data.aspects);\r\n      //var selfSustainBuild = [...buildWithChosenAspects]\r\n      var selfSustainBuild = [];\r\n\r\n      for (let x in chosenAspects) {\r\n        let asp = chosenAspects[x]\r\n        if (asp.tier == 2) {\r\n          let embBonus = _.sample(relevantEmbodiments)\r\n\r\n          asp.rewards[embBonus] = (asp.rewards[embBonus] == undefined) ? 1 : asp.rewards[embBonus] + 1;\r\n          asp.name += \" (+\" + embBonus + \")\"\r\n        }\r\n        selfSustainBuild.push(asp);\r\n      }\r\n\r\n      // after we fullfill reqs, change relevant embs to just the ones chosen\r\n\r\n      for (let x = 0; x < 1000; x++) { // getting rest of aspects needed to selfsustain\r\n        let reqs = getRemainingReqs(selfSustainBuild);\r\n        if (fullfillsRequirements(selfSustainBuild)) {\r\n          // if we fullfill reqs, switch to amassing embodiments chosen\r\n          reqs = {}\r\n          let minmax = this.getMinMaxEmbodiments()\r\n          for (let x in minmax) {\r\n            reqs[minmax[x]] = 9999;\r\n          }\r\n        }\r\n\r\n        // check if we're done\r\n        if (fullfillsRequirements(selfSustainBuild) && getTotalPoints(selfSustainBuild) >= this.state.maxPoints - 2) {\r\n          if (getTotalPoints(selfSustainBuild) <= this.state.maxPoints) {\r\n            validBuilds.push(selfSustainBuild);\r\n          }\r\n          break;\r\n        }\r\n        else { // else pick random asp and check again\r\n          let asp = _.sample(aspects);\r\n\r\n          if (hasRelevantRewards(asp, reqs) && !includesAspect(selfSustainBuild, asp)) {\r\n            if (asp.tier == 2) {\r\n              let embBonus = _.sample(relevantEmbodiments)\r\n\r\n              if (embBonus != undefined) {\r\n                asp.rewards[embBonus] = (asp.rewards[embBonus] == undefined) ? 1 : asp.rewards[embBonus] + 1;\r\n                asp.name += \" (+\" + embBonus + \")\"\r\n\r\n                selfSustainBuild.push(asp);\r\n              }\r\n            }\r\n            else {\r\n              selfSustainBuild.push(asp);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    var bestBuilds = [];\r\n    var bestScore = null;\r\n    for (let x in validBuilds) { // filter them down to the ones with most embs\r\n      let build = validBuilds[x]\r\n      let score = 0\r\n      let minmax = this.getMinMaxEmbodiments()\r\n\r\n      let rews = getTotalRewards(build)\r\n      for (let x in minmax) {\r\n        score += rews[minmax[x]]\r\n      }\r\n\r\n      if (bestBuilds.length == 0) {\r\n        bestBuilds.push(build);\r\n        bestScore = score;\r\n      }\r\n      else if (score > bestScore) {\r\n        bestBuilds = [build];\r\n        bestScore = score;\r\n      }\r\n      else if (score == bestScore && bestBuilds.length <= this.state.maximumOutputs) {\r\n        bestBuilds.push(build);\r\n      }\r\n    }\r\n\r\n    console.log(bestBuilds);\r\n    console.log(bestScore);\r\n\r\n    bestBuilds = filterDuplicateBuilds(bestBuilds)\r\n\r\n    let result = {\r\n      bestBuilds: bestBuilds,\r\n      bestScore: bestScore,\r\n    }\r\n\r\n    //return result;\r\n    this.setState({\r\n      result: result,\r\n      resultIndex: 0,\r\n    })\r\n  }\r\n\r\n  // add/remove aspects to the list of aspects we want to calculate, called by the checkboxes\r\n  updateSelection(aspect, e) {\r\n    var selection = this.state.selection.slice();\r\n\r\n    if (!selection.includes(aspect))\r\n      selection.push(aspect);\r\n    else\r\n      selection = selection.filter(function(val){ return val != aspect })\r\n\r\n    this.setState({\r\n      selection: selection\r\n    })\r\n  }\r\n\r\n  updateExclusion(aspect, e) {\r\n    var selection = this.state.excluded.slice();\r\n\r\n    if (!selection.includes(aspect))\r\n      selection.push(aspect);\r\n    else\r\n      selection = selection.filter(function(val){ return val != aspect })\r\n\r\n    this.setState({\r\n      excluded: selection\r\n    })\r\n  }\r\n\r\n  run() {\r\n    switch (this.state.mode) {\r\n      case \"fastest\": {\r\n        this.calculateShortestPath();\r\n        break;\r\n      }\r\n      case \"self-sustain\": {\r\n        this.calculateV2();\r\n        break;\r\n      }\r\n      case \"minmax-embodiments\": {\r\n        this.minMaxEmbodiments();\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  renderResults() {\r\n    if (this.state.result == null)\r\n      return null;\r\n    \r\n    var text = [];\r\n    if (this.state.mode == \"fastest\") {\r\n      let header = ((this.state.result.bestBuilds.length > 1) ? \"{0} paths found\" : \"{0} path found\").format(this.state.result.bestBuilds.length) + \" ({0} points needed, {1} to sustain)\".format(this.state.result.bestBuilds[this.state.resultIndex].maxPoints, this.state.result.bestBuilds[this.state.resultIndex].points)\r\n\r\n      var resultsPanel = <div className=\"flexbox-horizontal\">\r\n        {(this.state.result.bestBuilds.length > 1) ? <button className=\"arrow-button\" onClick={() => this.changeIndex(1)}>{\"<\"}</button> : null}\r\n        <p className={this.textClass}>{header}</p>\r\n        {(this.state.result.bestBuilds.length > 1) ? <button className=\"arrow-button\" onClick={() => this.changeIndex(-1)}>{\">\"}</button> : null}\r\n      </div>\r\n\r\n      var path = this.state.result.bestBuilds[this.state.resultIndex].path;\r\n      let darkModeClass = this.state.darkMode ? \"-dark-mode\" : \"\"\r\n\r\n      for (let x in path) {\r\n        let element = path[x];\r\n\r\n        switch(element.role) {\r\n          case \"goal\": {\r\n            text.push(<p className={\"result-goal\" + darkModeClass} key={x}>{element.aspect.name}</p>)\r\n            break;\r\n          }\r\n          case \"removable-removed\":\r\n          case \"removable\": {\r\n            text.push(<p className={\"result-removable\" + darkModeClass} key={x}>{element.aspect.name}</p>)\r\n            break;\r\n          }\r\n          case \"remove\": {\r\n            text.push(<p className={\"result-removable\" + darkModeClass} key={x}>{\"❌ \" + element.aspect.name}</p>)\r\n            break;\r\n          }\r\n          case \"key\": {\r\n            text.push(<p className={\"result-key\" + darkModeClass} key={x}>{element.aspect.name}</p>)\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (x != path.length - 1)\r\n          text.push(<p className={\"result-arrow\" + darkModeClass} key={-x-1}>{\" -> \"}</p>)\r\n      }\r\n\r\n      return <div>\r\n        <div>{resultsPanel}</div>\r\n        <div className=\"flexbox-horizontal\">{text}</div>\r\n      </div>;\r\n    }\r\n    else if (this.state.mode == \"self-sustain\") {\r\n      let header = ((this.state.result.bestBuilds.length > 1) ? \"{0} builds found\" : \"{0} build found\").format(this.state.result.bestBuilds.length) + \" ({0} points to sustain)\".format(this.state.result.buildPoints)\r\n\r\n      let elements = []\r\n\r\n      var resultsPanel = <div className=\"flexbox-horizontal\">\r\n        {(this.state.result.bestBuilds.length > 1) ? <button className=\"arrow-button\" onClick={() => this.changeIndex(1)}>{\"<\"}</button> : null}\r\n        <p className={this.textClass}>{header}</p>\r\n        {(this.state.result.bestBuilds.length > 1) ? <button className=\"arrow-button\" onClick={() => this.changeIndex(-1)}>{\">\"}</button> : null}\r\n      </div>\r\n\r\n      let build = this.state.result.bestBuilds[this.state.resultIndex];\r\n\r\n      for (let x in build) {\r\n        elements.push(<p className={this.textClass + \" result-goal\"}>{build[x].name}</p>)\r\n\r\n        if (x != build.length - 1)\r\n          elements.push(<p className={this.textClass} style={{marginRight: \"5px\"}}>, </p>)\r\n      }\r\n\r\n      return <div>\r\n        {resultsPanel}\r\n        <div className=\"flexbox-horizontal\">{elements}</div>\r\n        <div className=\"flexbox-horizontal\">{text}</div>\r\n      </div>;\r\n    }\r\n    else if (this.state.mode == \"minmax-embodiments\") {\r\n      let header = ((this.state.result.bestBuilds.length > 1) ? \"{0} builds found:\" : \"{0} build found:\").format(this.state.result.bestBuilds.length)\r\n\r\n      let build = this.state.result.bestBuilds[this.state.resultIndex];\r\n      let rews = getTotalRewards(build)\r\n\r\n      let relevantEmbs = {}\r\n      for (let x in this.state.minMaxEmbodiments) {\r\n        if (this.state.minMaxEmbodiments[x]) {\r\n          relevantEmbs[x] = rews[x]\r\n        }\r\n      }\r\n\r\n      // embs display\r\n      let embDisplay = []\r\n      for (let x in relevantEmbs) {\r\n        embDisplay.push(<Embodiment type={x} darkMode={this.state.darkMode} amount={relevantEmbs[x]}/>)\r\n      }\r\n\r\n      let elements = []\r\n\r\n      var resultsPanel = <div className=\"flexbox-horizontal\">\r\n        {(this.state.result.bestBuilds.length > 1) ? <button className=\"arrow-button\" onClick={() => this.changeIndex(1)}>{\"<\"}</button> : null}\r\n        <p className={this.textClass}>{header}</p>\r\n        {embDisplay}\r\n        {(this.state.result.bestBuilds.length > 1) ? <button className=\"arrow-button\" onClick={() => this.changeIndex(-1)}>{\">\"}</button> : null}\r\n      </div>\r\n\r\n      for (let x in build) {\r\n        elements.push(<p className={this.textClass + \" result-goal\"}>{build[x].name}</p>)\r\n\r\n        if (x != build.length - 1)\r\n          elements.push(<p className={this.textClass} style={{marginRight: \"5px\"}}>, </p>)\r\n      }\r\n\r\n      return <div>\r\n        <div className=\"flexbox-horizontal\">\r\n          {resultsPanel}\r\n        </div>\r\n        <div className=\"flexbox-horizontal\">{elements}</div>\r\n        <div className=\"flexbox-horizontal\">{text}</div>\r\n      </div>;\r\n    }\r\n  }\r\n\r\n  get textClass() {return (this.state.darkMode) ? \"dark-mode-text\" : \"\"}\r\n  get checkboxClass() {return (this.state.darkMode) ? \"dark-mode-checkbox\" : \"\"}\r\n\r\n  render() {\r\n    var forceAspects = [];\r\n    var entropyAspects = [];\r\n    var formAspects = [];\r\n    var inertiaAspects = [];\r\n    var lifeAspects = [];\r\n\r\n    // dark mode bg\r\n    if (this.state.darkMode) {\r\n      document.getElementsByTagName(\"body\")[0].classList = \"dark-bg\"\r\n    }\r\n    else {\r\n      document.getElementsByTagName(\"body\")[0].classList = \"\"\r\n    }\r\n\r\n    // buttons to select embodiments wanted for minmax embs mode\r\n    let embodimentSelection = null;\r\n    if (this.state.mode == \"minmax-embodiments\") {\r\n      embodimentSelection = <div className=\"flexbox-horizontal\">\r\n        <EmbodimentSelector app={this} type=\"force\" text=\"Force\"/>\r\n        <EmbodimentSelector app={this} type=\"entropy\" text=\"Entropy\"/>\r\n        <EmbodimentSelector app={this} type=\"form\" text=\"Form\"/>\r\n        <EmbodimentSelector app={this} type=\"inertia\" text=\"Inertia\"/>\r\n        <EmbodimentSelector app={this} type=\"life\" text=\"Life\"/>\r\n      </div>\r\n    }\r\n\r\n    // aspect elements\r\n    for (var x in aspects) {\r\n      var aspect = aspects[x];\r\n      var currentAspect;\r\n\r\n      var element = <Aspect\r\n      darkMode={this.state.darkMode} \r\n      data={aspect}\r\n      key={x}\r\n      clickCallback={this.updateSelection.bind(this)}\r\n      app={this}\r\n      />\r\n\r\n      var hr = <hr key={x + \"_hr\"}></hr>;\r\n\r\n      if (aspect.generated == undefined) { // don't display \"technical\" aspects\r\n        switch (aspect.family) {\r\n          case \"force\":\r\n            currentAspect = forceAspects;\r\n            break;\r\n          case \"entropy\":\r\n            currentAspect = entropyAspects;\r\n            break;\r\n          case \"form\":\r\n            currentAspect = formAspects;\r\n            break;\r\n          case \"inertia\":\r\n            currentAspect = inertiaAspects;\r\n            break;\r\n          case \"life\":\r\n            currentAspect = lifeAspects;\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n\r\n      if (currentAspect != undefined) {\r\n        if (currentAspect != undefined && currentAspect.generated == undefined)\r\n          currentAspect.push(element);\r\n\r\n        var aspectsAfterWhichWePutAnHrSoThingsLookNice = [\r\n          \"core_force\",\r\n          \"serpent\",\r\n          \"tiger\",\r\n          \"core_entropy\",\r\n          \"wolf\",\r\n          \"supplicant\",\r\n          \"core_form\",\r\n          \"silkworm\",\r\n          \"wealth\",\r\n          \"core_inertia\",\r\n          \"guardsman\",\r\n          \"rhinoceros\",\r\n          \"core_life\",\r\n          \"rabbit\",\r\n          \"stag\",\r\n        ]\r\n        if (aspectsAfterWhichWePutAnHrSoThingsLookNice.includes(aspect.id) && currentAspect.generated == undefined)\r\n          currentAspect.push(hr);\r\n        }\r\n    }\r\n\r\n    // display requirements and rewards of chosen aspects\r\n    var requirementsInfo = null;\r\n    if (this.state.selection.length > 0 || this.state.useFullCore) {\r\n      // consider the core. it's not usually in selection and is instead added during filtering\r\n      let selection = this.state.selection.slice();\r\n      if (this.state.useFullCore) {\r\n        selection.push(aspects.core_full)\r\n        selection = selection.filter(function(item) {return item.isCoreNode == undefined})\r\n      }\r\n\r\n      let reqs = getTotalReqs(selection, true)\r\n      let rewards = getTotalRewards(selection, true, true)\r\n      let nodes = getTotalPoints(selection)\r\n\r\n      let reqEmbs = []\r\n      let rewEmbs = []\r\n      let pointsText = <p className={this.textClass} style={{marginLeft: \"0px\"}}>{\", nodes: {0}\".format(nodes)}</p>\r\n      var key = 0;\r\n\r\n      for (let x in reqs) {\r\n        reqEmbs.push(<Embodiment\r\n          key={key}\r\n          type={x}\r\n          amount={reqs[x]}\r\n          darkMode={this.state.darkMode}\r\n        />)\r\n        key++;\r\n      }\r\n      if (reqEmbs.length == 0) {\r\n        reqEmbs.push(<p className={this.textClass} style={{marginLeft: \"5px\"}}>none</p>)\r\n      }\r\n\r\n      for (let x in rewards) {\r\n        if (x == \"any\") {\r\n          rewEmbs.push(<p key={key} className={this.textClass}>{\", {0} any\".format(rewards[x])}</p>)\r\n        }\r\n        else {\r\n          rewEmbs.push(<Embodiment\r\n            key={key}\r\n            type={x}\r\n            amount={rewards[x]}\r\n            darkMode={this.state.darkMode}\r\n          />)\r\n        }\r\n        key++;\r\n      }\r\n      if (rewEmbs.length == 0) {\r\n        rewEmbs.push(<p className={this.textClass} style={{marginLeft: \"5px\"}}>none.</p>)\r\n      }\r\n\r\n      requirementsInfo = <div className=\"flexbox-horizontal\">\r\n        <p className={this.textClass}>{\"Requirements of chosen aspects: \"}</p>\r\n        {reqEmbs}\r\n        <p className={this.textClass}>{\", rewards:\"}</p>\r\n        {rewEmbs}\r\n        {pointsText}\r\n      </div>\r\n    }\r\n\r\n    let resultsPanel = this.renderResults();\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"table\">\r\n          <div className=\"aspect-column\">\r\n            {forceAspects}\r\n          </div>\r\n          <div className=\"aspect-column\">\r\n            {entropyAspects}\r\n          </div>\r\n          <div className=\"aspect-column\">\r\n            {formAspects}\r\n          </div>\r\n          <div className=\"aspect-column\">\r\n            {inertiaAspects}\r\n          </div>\r\n          <div className=\"aspect-column\">\r\n            {lifeAspects}\r\n          </div>\r\n        </div>\r\n        {/* options buttons */}\r\n        <div className=\"bottom-interface\">\r\n          <Tippy content={strings.iterations} placement=\"bottom\" duration=\"0\">\r\n            <div className=\"num-input\">\r\n              <p className={this.textClass}>Builds to try:</p>\r\n              <input type=\"val\" value={this.state.iterations} onChange={(e) => this.setState({iterations: e.target.value})}></input>\r\n            </div>\r\n          </Tippy>\r\n          <Tippy content={strings.useFullCore} placement=\"bottom\" duration=\"0\">\r\n            <div className=\"checkbox-bottom-ui\">\r\n              <input type=\"checkbox\" checked={this.state.useFullCore} onChange={(e) => this.setState({useFullCore: e.target.checked})}></input>\r\n              <p className={this.textClass}>Use a full Core</p>\r\n            </div>\r\n          </Tippy>\r\n          {/* <Tippy content={strings.considerDipping} placement=\"bottom\" duration=\"0\">\r\n            <div className=\"checkbox-bottom-ui\">\r\n              <input type=\"checkbox\" checked={this.state.considerDipping} onChange={(e) => this.setState({considerDipping: e.target.checked})}></input>\r\n              <p className={textClass}>Consider dipping tier 2 aspects</p>\r\n            </div>\r\n          </Tippy> */}\r\n          <Tippy content={\"Change the UI to be dark. This setting persists even if you refresh the page.\"} placement=\"bottom\" duration=\"0\">\r\n          <div className=\"checkbox-bottom-ui\">\r\n              <input type=\"checkbox\" checked={this.state.darkMode} onChange={(e) => {this.setState({darkMode: e.target.checked}); window.localStorage.setItem(\"darkMode\", e.target.checked)}}></input>\r\n              <p className={this.textClass}>Dark mode</p>\r\n            </div>\r\n          </Tippy>\r\n          <Tippy content={strings.mode} placement=\"bottom\" duration=\"0\">\r\n            <div className=\"dropdown\">\r\n              <select onChange={(e) => this.setState({mode: e.target.value, result: null,})}>\r\n                <option value=\"fastest\">Find shortest paths</option>\r\n                <option value=\"self-sustain\">Find self-sustainable builds</option>\r\n                <option value=\"minmax-embodiments\">Maximize Embodiments</option>\r\n              </select>\r\n            </div>\r\n          </Tippy>\r\n        </div>\r\n        <div className=\"bottom-interface column\">\r\n          {requirementsInfo}\r\n          {embodimentSelection}\r\n          <button onClick={() => this.run()}>{(this.state.mode == \"self-sustain\") ? \"Find self-sustained builds\" : (this.state.mode == \"fastest\") ? \"Find shortest paths\" : \"Find builds\"}</button>\r\n          {resultsPanel}\r\n        </div>\r\n        <div className=\"source-code-link\">\r\n          <a href=\"https://github.com/PinewoodPip/ee2calc\">Source code</a>\r\n        </div>\r\n      </div>\r\n    )\r\n  };\r\n}\r\n\r\n// --------- HELPER FUNCTIONS ------------\r\n\r\nfunction capitalizeFirstLetter(string) { // https://stackoverflow.com/a/1026087\r\n  return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n\r\nfunction getTotalPoints(build) {\r\n  var points = 0;\r\n  for (var x = 0; x < build.length; x++) {\r\n    points += build[x].nodes;\r\n  }\r\n\r\n  return points;\r\n}\r\n\r\n// https://stackoverflow.com/questions/6229197/how-to-know-if-two-arrays-have-the-same-values/34566587\r\n// yeah I really was too lazy to write this myself\r\nfunction arraysEqual(_arr1, _arr2) {\r\n  if (!Array.isArray(_arr1) || ! Array.isArray(_arr2) || _arr1.length !== _arr2.length)\r\n    return false;\r\n  var arr1 = _arr1.concat().sort();\r\n  var arr2 = _arr2.concat().sort();\r\n  for (var i = 0; i < arr1.length; i++) {\r\n    if (arr1[i] !== arr2[i])\r\n      return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction filterDuplicateBuilds(builds) {\r\n  var pathIds = []\r\n  var duplicates = []\r\n  for (let x in builds) {\r\n    let pathId = []\r\n\r\n    for (let z in builds[x]) {\r\n      let asp = builds[x][z];\r\n      pathId.push(asp.name)\r\n    }\r\n\r\n    pathId.sort();\r\n\r\n    for (let z in pathIds) {\r\n      if (arraysEqual(pathIds[z], pathId)) {\r\n        duplicates.push(parseInt(pathIds.length))\r\n      }\r\n    }\r\n\r\n    pathIds.push(pathId)\r\n  }\r\n  console.log(pathIds)\r\n  console.log(duplicates)\r\n\r\n  return builds.filter(function(item, index){\r\n    return !duplicates.includes(index);\r\n  });\r\n}\r\n\r\nfunction filterDuplicatePaths(bestPaths) {\r\n  var pathIds = []\r\n  var duplicates = []\r\n  for (let x in bestPaths) {\r\n    let pathId = []\r\n\r\n    for (let z in bestPaths[x].build) {\r\n      let asp = bestPaths[x].build[z];\r\n      pathId.push(asp.name)\r\n    }\r\n\r\n    pathId.sort();\r\n\r\n    for (let z in pathIds) {\r\n      if (arraysEqual(pathIds[z], pathId)) {\r\n        duplicates.push(parseInt(pathIds.length))\r\n      }\r\n    }\r\n\r\n    pathIds.push(pathId)\r\n  }\r\n  console.log(pathIds)\r\n  console.log(duplicates)\r\n\r\n  return bestPaths.filter(function(item, index){\r\n    return !duplicates.includes(index);\r\n  });\r\n}\r\n\r\n// gets the highest requirement for each embodiment on a build\r\nfunction getTotalReqs(aspects, hideUnused=false) { // requires an array\r\n  var embodiments = {\r\n    force: 0,\r\n    entropy: 0,\r\n    form: 0,\r\n    inertia: 0,\r\n    life: 0,\r\n  };\r\n\r\n  for (var x in aspects) {\r\n    var aspect = aspects[x];\r\n\r\n    for (var z in aspect.requirements) {\r\n      if (aspect.requirements[z] > embodiments[z])\r\n        embodiments[z] = aspect.requirements[z]\r\n    }\r\n  }\r\n\r\n  if (hideUnused) {\r\n    for (let z in embodiments) {\r\n      if (embodiments[z] <= 0)\r\n        delete embodiments[z]\r\n    }\r\n  }\r\n\r\n  return embodiments;\r\n}\r\n\r\nfunction getTotalRewards(aspects, showAny=false, hideUnused=false) {\r\n  var rewards = {\r\n    force: 0,\r\n    entropy: 0,\r\n    form: 0,\r\n    inertia: 0,\r\n    life: 0,\r\n  };\r\n\r\n  if (showAny)\r\n    rewards.any = 0;\r\n\r\n  for (var x in aspects) {\r\n    var aspect = aspects[x];\r\n\r\n    if (showAny && aspect.tier == 2)\r\n      rewards.any++;\r\n\r\n    for (var r in aspect.rewards) {\r\n      rewards[r] += aspect.rewards[r];\r\n    }\r\n  }\r\n\r\n  if (hideUnused) {\r\n    for (let z in rewards) {\r\n      if (rewards[z] <= 0)\r\n        delete rewards[z]\r\n    }\r\n  }\r\n\r\n  return rewards;\r\n}\r\n\r\nfunction fullfillsRequirements(build, aspect=null) {\r\n  if (aspect != null) {\r\n    var embodiments = getTotalRewards(build);\r\n    var reqs = getTotalReqs(aspect);\r\n\r\n    for (let e in reqs) {\r\n      if (embodiments[e] < reqs[e])\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n  else {\r\n    var embodiments = getTotalRewards(build);\r\n    var reqs = getTotalReqs(build, false, true);\r\n\r\n    for (let e in reqs) {\r\n      if (embodiments[e] < reqs[e])\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n\r\nfunction getRelevantEmbs(build, goalBuild) {\r\n  let reqs = getTotalReqs(goalBuild)\r\n  let current = getTotalRewards(build)\r\n\r\n  for (let x in current) {\r\n    reqs[x] -= current[x]\r\n    if (reqs[x] < 0) {\r\n      reqs[x] = 0;\r\n    }\r\n  }\r\n\r\n  let relevant = []\r\n  for (let x in reqs) {\r\n    if (reqs[x] > 0) {\r\n      relevant.push(x)\r\n    }\r\n  }\r\n\r\n  return relevant;\r\n}\r\n\r\n// why does this discount ? error?\r\nfunction getRemainingReqs(build, deleteUnused=false) {\r\n  let reqs = getTotalReqs(build);\r\n\r\n  for (let x in build) {\r\n    let asp = build[x]\r\n    for (let z in asp.rewards) {\r\n      reqs[z] -= asp.rewards[z];\r\n    }\r\n  }\r\n\r\n  if (deleteUnused) {\r\n    for (let x in reqs) {\r\n      if (reqs[x] < 1) {\r\n        delete reqs[x]\r\n      }\r\n    }\r\n  }\r\n\r\n  return reqs;\r\n}\r\n\r\nfunction getRemainingReqs2(build, goal, deleteUnused=false) {\r\n  let reqs = getTotalReqs(goal);\r\n  let current = getTotalRewards(build)\r\n\r\n  for (let x in current) {\r\n    reqs[x] -= current[x];\r\n    if (reqs[x] < 0)\r\n      reqs[x] = 0;\r\n  }\r\n\r\n  if (deleteUnused) {\r\n    for (let x in reqs) {\r\n      if (reqs[x] < 1) {\r\n        delete reqs[x]\r\n      }\r\n    }\r\n  }\r\n\r\n  return reqs;\r\n}\r\n\r\nfunction hasRelevantRewards(asp, reqs) {\r\n  for (let x in reqs) {\r\n    if (asp.rewards[x] != undefined) {\r\n      if (asp.rewards[x] > 0)\r\n        return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction includesAspect(build, asp) {\r\n  for (let x in build) {\r\n    if (build[x].id == asp.id)\r\n      return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}