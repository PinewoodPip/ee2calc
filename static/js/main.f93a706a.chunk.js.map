{"version":3,"sources":["Data.js","App.js","serviceWorker.js","index.js"],"names":["aspects","core_full","name","id","family","tier","requirements","rewards","force","entropy","form","inertia","life","nodes","hasChoiceNode","core_force","isCoreNode","falcon","hatchet","hornet","serpent","arcanist","archer","manticore","scorpion","tiger","conqueror","kraken","wrath","core_entropy","crow","fly","vulture","wolf","blood_ape","extinction","imp","hyena","supplicant","death","decay","demilich","core_form","chalice","key","nautilus","silkworm","basilisk","doppelganger","dragon","gryphon","wealth","cerberus","ritual","sphinx","core_inertia","armadillo","auroch","crab","guardsman","casque","centurion","gladiator","hippopotamus","rhinoceros","arena","champion","fortress","core_life","beetle","hind","lizard","rabbit","enchantress","huntress","nymph","pegasus","stag","goddess","hope","splendor","strings","String","prototype","format","args","arguments","this","replace","m","n","extraAspects","x","aspect","y","rewardsPerPoint","totalRequirements","z","Checkbox","data","e","props","app","state","selection","includes","updateSelection","updateExclusion","excluded","text","className","darkMode","onClick","toggle","React","Component","Embodiment","type","amount","Aspect","elements","element","push","embs","string","header","charAt","toUpperCase","slice","cost","getRewards","nodeText","content","getTooltip","placement","duration","getRequirementsText","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","isInObject","thing","obj","getTotalPoints","build","points","GetPathOperationOrder","toRemove","path","asp","operation","splice","time","console","log","getTotalReqs","hideUnused","embodiments","getTotalRewards","showAny","any","r","fullfillsRequirements","reqs","aspectAlreadyPicked","App","result","waiting","useFullCore","considerDipping","selfSustain","pointsBudget","preference","iterations","maximumOutputs","resultIndex","window","localStorage","getItem","change","current","bestPaths","setState","list","realList","excludedAspects","newList","hasRelevantReward","reward","dipping","undefined","generated","extraEmbodimentType","bind","func","hasOwnProperty","aspectWithHighestRequirements","i","chosenAspects","b","getRemainingReqs","hasRelevantRewards","includesAspect","deleteUnused","filterApplicableAspects","_","cloneDeep","Object","keys","confirm","relevantEmbodiments","buildWithChosenAspects","validBuilds","tier1s","selfSustainBuild","embBonus","sample","bestBuilds","bestPoints","pointsNeeded","bestPathsPoints","keyAspects","c","role","pathIds","duplicates","pathId","sort","filter","item","buildPoints","selfSustainPoints","pathPoints","iteration","u","availableAspects","attempts","skipRandomChoice","breakThis","v","chosenAspect","newGoals","allChosenNodesObtained","aspectsToRemove","filteredBuild","buildWithoutThat","val","pathOperationOrder","pointsToReach","pointsToSustain","buildInfo","finalCost","score","totalEmbodiments","bestBuild","index","arr","forceAspects","entropyAspects","formAspects","inertiaAspects","lifeAspects","textClass","document","getElementsByTagName","classList","currentAspect","clickCallback","hr","requirementsInfo","reqEmbs","rewEmbs","resultsPanel","changeIndex","darkModeClass","value","onChange","target","checked","setItem","calculateV2","href","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f93a706a.chunk.js","sourcesContent":["export const aspects = {\r\n    core_full: {\r\n      name: \"Core (Full)\",\r\n      id: \"core_full\",\r\n      family: \"special\",\r\n      tier: 1,\r\n      requirements: {\r\n      },\r\n      rewards: {\r\n        force: 2,\r\n        entropy: 2,\r\n        form: 2,\r\n        inertia: 2,\r\n        life: 2,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    core_force: {\r\n      name: \"Core (Force)\",\r\n      id: \"core_force\",\r\n      family: \"force\",\r\n      tier: 1,\r\n      requirements: {\r\n      },\r\n      rewards: {\r\n        force: 1,\r\n      },\r\n      nodes: 1,\r\n      hasChoiceNode: false,\r\n      isCoreNode: true,\r\n    },\r\n    falcon: {\r\n      name: \"Falcon\",\r\n      id: \"falcon\",\r\n      family: \"force\",\r\n      tier: 1,\r\n      requirements: {\r\n        force: 1\r\n      },\r\n      rewards: {\r\n        force: 3,\r\n        life: 2,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    hatchet: {\r\n      name: \"Hatchet\",\r\n      id: \"hatchet\",\r\n      family: \"force\",\r\n      tier: 1,\r\n      requirements: {\r\n        force: 1\r\n      },\r\n      rewards: {\r\n        force: 3,\r\n        entropy: 2,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    hornet: {\r\n      name: \"Hornet\",\r\n      id: \"hornet\",\r\n      family: \"force\",\r\n      tier: 1,\r\n      requirements: {\r\n        force: 1,\r\n      },\r\n      rewards: {\r\n        force: 3,\r\n        life: 1,\r\n      },\r\n      nodes: 3,\r\n      hasChoiceNode: false,\r\n    },\r\n    serpent: {\r\n      name: \"Serpent\",\r\n      id: \"serpent\",\r\n      family: \"force\",\r\n      tier: 1,\r\n      requirements: {\r\n        force: 1,\r\n      },\r\n      rewards: {\r\n        force: 3,\r\n        entropy: 1,\r\n      },\r\n      nodes: 3,\r\n      hasChoiceNode: false,\r\n    },\r\n    // FORCE TIER 2\r\n    arcanist: {\r\n      name: \"Arcanist\",\r\n      id: \"arcanist\",\r\n      family: \"force\",\r\n      tier: 2,\r\n      requirements: {\r\n        force: 5,\r\n        life: 1,\r\n      },\r\n      rewards: {\r\n        force: 3,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: true,\r\n    },\r\n    archer: {\r\n      name: \"Archer\",\r\n      id: \"archer\",\r\n      family: \"force\",\r\n      tier: 2,\r\n      requirements: {\r\n        force: 3,\r\n        entropy: 2,\r\n        life: 1,\r\n      },\r\n      rewards: {\r\n        force: 2,\r\n        entropy: 1,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: true,\r\n    },\r\n    manticore: {\r\n      name: \"Manticore\",\r\n      id: \"manticore\",\r\n      family: \"force\",\r\n      tier: 2,\r\n      requirements: {\r\n        force: 5,\r\n        entropy: 1,\r\n      },\r\n      rewards: {\r\n        force: 3,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: true,\r\n    },\r\n    scorpion: {\r\n      name: \"Scorpion\",\r\n      id: \"scorpion\",\r\n      family: \"force\",\r\n      tier: 2,\r\n      requirements: {\r\n        force: 4,\r\n        entropy: 2,\r\n      },\r\n      rewards: {\r\n        force: 2,\r\n      },\r\n      nodes: 4,\r\n      hasChoiceNode: true,\r\n    },\r\n    tiger: {\r\n      name: \"Tiger\",\r\n      id: \"tiger\",\r\n      family: \"force\",\r\n      tier: 2,\r\n      requirements: {\r\n        force: 4,\r\n        life: 2,\r\n      },\r\n      rewards: {\r\n        force: 2,\r\n      },\r\n      nodes: 4,\r\n      hasChoiceNode: true,\r\n    },\r\n    // FORCE TIER 3\r\n    conqueror: {\r\n      name: \"Conqueror\",\r\n      id: \"conqueror\",\r\n      family: \"force\",\r\n      tier: 3,\r\n      requirements: {\r\n        force: 7,\r\n        entropy: 1,\r\n        life: 5,\r\n      },\r\n      rewards: {\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    kraken: {\r\n      name: \"Kraken\",\r\n      id: \"kraken\",\r\n      family: \"force\",\r\n      tier: 3,\r\n      requirements: {\r\n        force: 7,\r\n        entropy: 5,\r\n        life: 1,\r\n      },\r\n      rewards: {\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    wrath: {\r\n      name: \"Wrath\",\r\n      id: \"wrath\",\r\n      family: \"force\",\r\n      tier: 3,\r\n      requirements: {\r\n        force: 8,\r\n        entropy: 3,\r\n        life: 2,\r\n      },\r\n      rewards: {\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    // ENTROPY TIER 1\r\n    core_entropy: {\r\n      name: \"Core (Entropy)\",\r\n      id: \"core_entropy\",\r\n      family: \"entropy\",\r\n      tier: 1,\r\n      requirements: {\r\n      },\r\n      rewards: {\r\n        entropy: 1,\r\n      },\r\n      nodes: 1,\r\n      hasChoiceNode: false,\r\n      isCoreNode: true,\r\n    },\r\n    crow: {\r\n      name: \"Crow\",\r\n      id: \"crow\",\r\n      family: \"entropy\",\r\n      tier: 1,\r\n      requirements: {\r\n        entropy: 1,\r\n      },\r\n      rewards: {\r\n        entropy: 3,\r\n        form: 1,\r\n      },\r\n      nodes: 3,\r\n      hasChoiceNode: false,\r\n    },\r\n    fly: {\r\n      name: \"Fly\",\r\n      id: \"fly\",\r\n      family: \"entropy\",\r\n      tier: 1,\r\n      requirements: {\r\n        entropy: 1,\r\n      },\r\n      rewards: {\r\n        entropy: 3,\r\n        form: 2,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    vulture: {\r\n      name: \"Vulture\",\r\n      id: \"vulture\",\r\n      family: \"entropy\",\r\n      tier: 1,\r\n      requirements: {\r\n        entropy: 1,\r\n      },\r\n      rewards: {\r\n        entropy: 3,\r\n        force: 2,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    wolf: {\r\n      name: \"Wolf\",\r\n      id: \"wolf\",\r\n      family: \"entropy\",\r\n      tier: 1,\r\n      requirements: {\r\n        entropy: 1,\r\n      },\r\n      rewards: {\r\n        entropy: 3,\r\n        force: 1,\r\n      },\r\n      nodes: 3,\r\n      hasChoiceNode: false,\r\n    },\r\n    // ENTROPY TIER 2\r\n    blood_ape: {\r\n      name: \"Blood Ape\",\r\n      id: \"blood_ape\",\r\n      family: \"entropy\",\r\n      tier: 2,\r\n      requirements: {\r\n        entropy: 3,\r\n        force: 1,\r\n        form: 2,\r\n      },\r\n      rewards: {\r\n        entropy: 2,\r\n        form: 1,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: true,\r\n    },\r\n    extinction: {\r\n      name: \"Extinction\",\r\n      id: \"extinction\",\r\n      family: \"entropy\",\r\n      tier: 2,\r\n      requirements: {\r\n        entropy: 4,\r\n        force: 2,\r\n      },\r\n      rewards: {\r\n        entropy: 2,\r\n      },\r\n      nodes: 4,\r\n      hasChoiceNode: true,\r\n    },\r\n    imp: {\r\n      name: \"Imp\",\r\n      id: \"imp\",\r\n      family: \"entropy\",\r\n      tier: 2,\r\n      requirements: {\r\n        entropy: 5,\r\n        form: 1,\r\n      },\r\n      rewards: {\r\n        entropy: 3,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: true,\r\n    },\r\n    hyena: {\r\n      name: \"Hyena\",\r\n      id: \"hyena\",\r\n      family: \"entropy\",\r\n      tier: 2,\r\n      requirements: {\r\n        entropy: 5,\r\n        force: 1,\r\n      },\r\n      rewards: {\r\n        entropy: 3,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: true,\r\n    },\r\n    supplicant: {\r\n      name: \"Supplicant\",\r\n      id: \"supplicant\",\r\n      family: \"entropy\",\r\n      tier: 2,\r\n      requirements: {\r\n        entropy: 4,\r\n        form: 2,\r\n      },\r\n      rewards: {\r\n        entropy: 2,\r\n      },\r\n      nodes: 4,\r\n      hasChoiceNode: true,\r\n    },\r\n    // ENTROPY TIER 3\r\n    death: {\r\n      name: \"Death\",\r\n      id: \"death\",\r\n      family: \"entropy\",\r\n      tier: 3,\r\n      requirements: {\r\n        entropy: 8,\r\n        force: 2,\r\n        form: 3,\r\n      },\r\n      rewards: {\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    decay: {\r\n      name: \"Decay\",\r\n      id: \"decay\",\r\n      family: \"entropy\",\r\n      tier: 3,\r\n      requirements: {\r\n        entropy: 7,\r\n        force: 5,\r\n        form: 1,\r\n      },\r\n      rewards: {\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    demilich: {\r\n      name: \"Demilich\",\r\n      id: \"demilich\",\r\n      family: \"entropy\",\r\n      tier: 3,\r\n      requirements: {\r\n        entropy: 7,\r\n        force: 1,\r\n        form: 5,\r\n      },\r\n      rewards: {\r\n      },\r\n      nodes: 6,\r\n      hasChoiceNode: false,\r\n    },\r\n    // FORM TIER 1\r\n    core_form: {\r\n      name: \"Core (Form)\",\r\n      id: \"core_form\",\r\n      family: \"form\",\r\n      tier: 1,\r\n      requirements: {\r\n      },\r\n      rewards: {\r\n        form: 1,\r\n      },\r\n      nodes: 1,\r\n      hasChoiceNode: false,\r\n      isCoreNode: true,\r\n    },\r\n    chalice: { // consume the cum chalice\r\n      name: \"Chalice\",\r\n      id: \"chalice\",\r\n      family: \"form\",\r\n      tier: 1,\r\n      requirements: {\r\n        form: 1,\r\n      },\r\n      rewards: {\r\n        form: 3,\r\n        inertia: 2,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    key: {\r\n      name: \"Key\",\r\n      id: \"key\",\r\n      family: \"form\",\r\n      tier: 1,\r\n      requirements: {\r\n        form: 1,\r\n      },\r\n      rewards: {\r\n        form: 3,\r\n        entropy: 2,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    nautilus: {\r\n      name: \"Nautilus\",\r\n      id: \"nautilus\",\r\n      family: \"form\",\r\n      tier: 1,\r\n      requirements: {\r\n        form: 1,\r\n      },\r\n      rewards: {\r\n        form: 3,\r\n        inertia: 1,\r\n      },\r\n      nodes: 3,\r\n      hasChoiceNode: false,\r\n    },\r\n    silkworm: {\r\n      name: \"Silkworm\",\r\n      id: \"silkworm\",\r\n      family: \"form\",\r\n      tier: 1,\r\n      requirements: {\r\n        form: 1,\r\n      },\r\n      rewards: {\r\n        form: 3,\r\n        entropy: 1,\r\n      },\r\n      nodes: 3,\r\n      hasChoiceNode: false,\r\n    },\r\n    // FORM TIER 2\r\n    basilisk: {\r\n      name: \"Basilisk\",\r\n      id: \"basilisk\",\r\n      family: \"form\",\r\n      tier: 2,\r\n      requirements: {\r\n        form: 4,\r\n        entropy: 2,\r\n      },\r\n      rewards: {\r\n        form: 2,\r\n      },\r\n      nodes: 4,\r\n      hasChoiceNode: true,\r\n    },\r\n    doppelganger: {\r\n      name: \"Doppelganger\",\r\n      id: \"doppelganger\",\r\n      family: \"form\",\r\n      tier: 2,\r\n      requirements: {\r\n        form: 5,\r\n        entropy: 1,\r\n      },\r\n      rewards: {\r\n        form: 3,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: true,\r\n    },\r\n    dragon: {\r\n      name: \"Dragon\",\r\n      id: \"dragon\",\r\n      family: \"form\",\r\n      tier: 2,\r\n      requirements: {\r\n        form: 5,\r\n        inertia: 1,\r\n      },\r\n      rewards: {\r\n        form: 3,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: true,\r\n    },\r\n    gryphon: {\r\n      name: \"Gryphon\",\r\n      id: \"gryphon\",\r\n      family: \"form\",\r\n      tier: 2,\r\n      requirements: {\r\n        form: 4,\r\n        inertia: 2,\r\n      },\r\n      rewards: {\r\n        form: 2,\r\n      },\r\n      nodes: 4,\r\n      hasChoiceNode: true,\r\n    },\r\n    wealth: {\r\n      name: \"Wealth\",\r\n      id: \"wealth\",\r\n      family: \"form\",\r\n      tier: 2,\r\n      requirements: {\r\n        form: 3,\r\n        inertia: 2,\r\n        entropy: 1,\r\n      },\r\n      rewards: {\r\n        form: 2,\r\n        inertia: 1,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: true,\r\n    },\r\n    // FORM TIER 3\r\n    cerberus: {\r\n      name: \"Cerberus\",\r\n      id: \"cerberus\",\r\n      family: \"form\",\r\n      tier: 3,\r\n      requirements: {\r\n        form: 7,\r\n        inertia: 5,\r\n        entropy: 1,\r\n      },\r\n      rewards: {\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    ritual: {\r\n      name: \"Ritual\",\r\n      id: \"ritual\",\r\n      family: \"form\",\r\n      tier: 3,\r\n      requirements: {\r\n        form: 7,\r\n        inertia: 1,\r\n        entropy: 5,\r\n      },\r\n      rewards: {\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    sphinx: {\r\n      name: \"Sphinx\",\r\n      id: \"sphinx\",\r\n      family: \"form\",\r\n      tier: 3,\r\n      requirements: {\r\n        form: 8,\r\n        inertia: 3,\r\n        entropy: 2,\r\n      },\r\n      rewards: {\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    // INERTIA TIER 1\r\n    core_inertia: {\r\n      name: \"Core (Inertia)\",\r\n      id: \"core_inertia\",\r\n      family: \"inertia\",\r\n      tier: 1,\r\n      requirements: {\r\n      },\r\n      rewards: {\r\n        inertia: 1,\r\n      },\r\n      nodes: 1,\r\n      hasChoiceNode: false,\r\n      isCoreNode: true,\r\n    },\r\n    armadillo: {\r\n      name: \"Armadillo\",\r\n      id: \"armadillo\",\r\n      family: \"inertia\",\r\n      tier: 1,\r\n      requirements: {\r\n        inertia: 1,\r\n      },\r\n      rewards: {\r\n        inertia: 3,\r\n        form: 1,\r\n      },\r\n      nodes: 3,\r\n      hasChoiceNode: false,\r\n    },\r\n    auroch: {\r\n      name: \"Auroch\",\r\n      id: \"auroch\",\r\n      family: \"inertia\",\r\n      tier: 1,\r\n      requirements: {\r\n        inertia: 1,\r\n      },\r\n      rewards: {\r\n        inertia: 3,\r\n        life: 1,\r\n      },\r\n      nodes: 3,\r\n      hasChoiceNode: false,\r\n    },\r\n    crab: {\r\n      name: \"Crab\",\r\n      id: \"crab\",\r\n      family: \"inertia\",\r\n      tier: 1,\r\n      requirements: {\r\n        inertia: 1,\r\n      },\r\n      rewards: {\r\n        inertia: 3,\r\n        life: 2,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    guardsman: {\r\n      name: \"Guardsman\",\r\n      id: \"guardsman\",\r\n      family: \"inertia\",\r\n      tier: 1,\r\n      requirements: {\r\n        inertia: 1,\r\n      },\r\n      rewards: {\r\n        inertia: 3,\r\n        form: 2,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    // INERTIA TIER 2\r\n    casque: {\r\n      name: \"Casque\",\r\n      id: \"casque\",\r\n      family: \"inertia\",\r\n      tier: 2,\r\n      requirements: {\r\n        inertia: 5,\r\n        life: 1,\r\n      },\r\n      rewards: {\r\n        inertia: 3,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: true,\r\n    },\r\n    centurion: {\r\n      name: \"Centurion\",\r\n      id: \"centurion\",\r\n      family: \"inertia\",\r\n      tier: 2,\r\n      requirements: {\r\n        inertia: 3,\r\n        form: 1,\r\n        life: 2,\r\n      },\r\n      rewards: {\r\n        inertia: 2,\r\n        life: 1,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: true,\r\n    },\r\n    gladiator: {\r\n      name: \"Gladiator\",\r\n      id: \"gladiator\",\r\n      family: \"inertia\",\r\n      tier: 2,\r\n      requirements: {\r\n        inertia: 3,\r\n        form: 3,\r\n      },\r\n      rewards: {\r\n        inertia: 2,\r\n        form: 1,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: true,\r\n    },\r\n    hippopotamus: {\r\n      name: \"Hippopotamus\",\r\n      id: \"hippopotamus\",\r\n      family: \"inertia\",\r\n      tier: 2,\r\n      requirements: {\r\n        inertia: 4,\r\n        life: 2,\r\n      },\r\n      rewards: {\r\n        inertia: 2,\r\n      },\r\n      nodes: 4,\r\n      hasChoiceNode: true,\r\n    },\r\n    rhinoceros: {\r\n      name: \"Rhinoceros\",\r\n      id: \"rhinoceros\",\r\n      family: \"inertia\",\r\n      tier: 2,\r\n      requirements: {\r\n        inertia: 4,\r\n        form: 2,\r\n      },\r\n      rewards: {\r\n        inertia: 2,\r\n      },\r\n      nodes: 4,\r\n      hasChoiceNode: true,\r\n    },\r\n    // INERTIA TIER 3\r\n    arena: {\r\n      name: \"Arena\",\r\n      id: \"arena\",\r\n      family: \"inertia\",\r\n      tier: 3,\r\n      requirements: {\r\n        inertia: 7,\r\n        life: 5,\r\n        form: 1,\r\n      },\r\n      rewards: {\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    champion: {\r\n      name: \"Champion\",\r\n      id: \"champion\",\r\n      family: \"inertia\",\r\n      tier: 3,\r\n      requirements: {\r\n        inertia: 8,\r\n        life: 3,\r\n        form: 2,\r\n      },\r\n      rewards: {\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    fortress: {\r\n      name: \"Fortress\",\r\n      id: \"fortress\",\r\n      family: \"inertia\",\r\n      tier: 3,\r\n      requirements: {\r\n        inertia: 7,\r\n        life: 1,\r\n        form: 5,\r\n      },\r\n      rewards: {\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    // LIFE TIER 1\r\n    core_life: {\r\n      name: \"Core (Life)\",\r\n      id: \"core_life\",\r\n      family: \"life\",\r\n      tier: 1,\r\n      requirements: {\r\n      },\r\n      rewards: {\r\n        life: 1,\r\n      },\r\n      nodes: 1,\r\n      hasChoiceNode: false,\r\n      isCoreNode: true,\r\n    },\r\n    beetle: {\r\n      name: \"Beetle\",\r\n      id: \"beetle\",\r\n      family: \"life\",\r\n      tier: 1,\r\n      requirements: {\r\n        life: 1,\r\n      },\r\n      rewards: {\r\n        life: 3,\r\n        force: 1,\r\n      },\r\n      nodes: 3,\r\n      hasChoiceNode: false,\r\n    },\r\n    hind: {\r\n      name: \"Hind\",\r\n      id: \"hind\",\r\n      family: \"life\",\r\n      tier: 1,\r\n      requirements: {\r\n        life: 1,\r\n      },\r\n      rewards: {\r\n        life: 3,\r\n        force: 2,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    lizard: {\r\n      name: \"Lizard\",\r\n      id: \"lizard\",\r\n      family: \"life\",\r\n      tier: 1,\r\n      requirements: {\r\n        life: 1,\r\n      },\r\n      rewards: {\r\n        life: 3,\r\n        inertia: 1,\r\n      },\r\n      nodes: 3,\r\n      hasChoiceNode: false,\r\n    },\r\n    rabbit: {\r\n      name: \"Rabbit\",\r\n      id: \"rabbit\",\r\n      family: \"life\",\r\n      tier: 1,\r\n      requirements: {\r\n        life: 1,\r\n      },\r\n      rewards: {\r\n        life: 3,\r\n        inertia: 2,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    // LIFE TIER 2\r\n    enchantress: {\r\n      name: \"Enchantress\",\r\n      id: \"enchantress\",\r\n      family: \"life\",\r\n      tier: 2,\r\n      requirements: {\r\n        life: 5,\r\n        force: 1,\r\n      },\r\n      rewards: {\r\n        life: 3,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: true,\r\n    },\r\n    huntress: {\r\n      name: \"Huntress\",\r\n      id: \"huntress\",\r\n      family: \"life\",\r\n      tier: 2,\r\n      requirements: {\r\n        life: 3,\r\n        force: 2,\r\n        inertia: 1,\r\n      },\r\n      rewards: {\r\n        life: 2,\r\n        force: 1,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: true,\r\n    },\r\n    nymph: {\r\n      name: \"Nymph\",\r\n      id: \"nymph\",\r\n      family: \"life\",\r\n      tier: 2,\r\n      requirements: {\r\n        life: 5,\r\n        inertia: 1,\r\n      },\r\n      rewards: {\r\n        life: 3,\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: true,\r\n    },\r\n    pegasus: {\r\n      name: \"Pegasus\",\r\n      id: \"pegasus\",\r\n      family: \"life\",\r\n      tier: 2,\r\n      requirements: {\r\n        life: 4,\r\n        inertia: 2,\r\n      },\r\n      rewards: {\r\n        life: 2,\r\n      },\r\n      nodes: 4,\r\n      hasChoiceNode: true,\r\n    },\r\n    stag: {\r\n      name: \"Stag\",\r\n      id: \"stag\",\r\n      family: \"life\",\r\n      tier: 2,\r\n      requirements: {\r\n        life: 4,\r\n        force: 2,\r\n      },\r\n      rewards: {\r\n        life: 2,\r\n      },\r\n      nodes: 4,\r\n      hasChoiceNode: true,\r\n    },\r\n    // LIFE TIER 3\r\n    goddess: {\r\n      name: \"Goddess\",\r\n      id: \"goddess\",\r\n      family: \"life\",\r\n      tier: 3,\r\n      requirements: {\r\n        life: 7,\r\n        inertia: 5,\r\n        force: 1,\r\n      },\r\n      rewards: {\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    hope: {\r\n      name: \"Hope\",\r\n      id: \"hope\",\r\n      family: \"life\",\r\n      tier: 3,\r\n      requirements: {\r\n        life: 7,\r\n        inertia: 1,\r\n        force: 5,\r\n      },\r\n      rewards: {\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n    splendor: {\r\n      name: \"Splendor\",\r\n      id: \"splendor\",\r\n      family: \"life\",\r\n      tier: 3,\r\n      requirements: {\r\n        life: 8,\r\n        inertia: 2,\r\n        force: 3,\r\n      },\r\n      rewards: {\r\n      },\r\n      nodes: 5,\r\n      hasChoiceNode: false,\r\n    },\r\n  }","import React from 'react';\r\nimport './App.css';\r\nimport _ from \"lodash\"\r\nimport Tippy from '@tippyjs/react';\r\nimport 'tippy.js/dist/tippy.css';\r\nimport { aspects } from \"./Data.js\" // ascension data goes there\r\nimport { result } from 'underscore';\r\n\r\n// todo:\r\n\r\n// add hoverable tooltips over each step of results display\r\n// remove self-sustain setting - DONE\r\n// revise scoring\r\n// t2s bug out in result display - NOT FIXED???, HAPPENS IN REMOVABLE ASPS ONLY\r\n// add dipping t2s, FOR THIS MAKE A HELPER FUNC FOR GENERATING T2S\r\n// revise scoring for both modes !!!, still seems inconsistent, sometimes result bugs out hard, revise path creation\r\n\r\n// something important to consider: going to grab the 2nd node of a tier 2, then backtracking to remove something\r\n// pointsNeeded calc doesnt work properly rn\r\n\r\n// maybe start building from the goal and pick aspects for embs, then go from start and try to make a real path out of that? - DONE\r\n\r\n// if lowest emb req is < number of t2s, use t2s for it and discard the emb's family, or cover it with core nodes? - SOMEWHAT DONE (not with core nodes)\r\n\r\n// after adding each new asp, make a new reqs list and only pull in relevant asps - DONE\r\n\r\nconst generateTechnicalAspects = false;\r\n\r\nconst strings = {\r\n  iterations: \"How many builds should be randomly generated. With higher amounts the search takes longer but is more likely to find the most efficient build. Keep this in the thousands, and increase it when you're doing crazy searches (3+ aspects chosen, multiple T3s, stuff like that).\",\r\n  useFullCore: \"Use a full Core instead of its lone nodes. A full Core grants 2 of each embodiment for 5 points.\",\r\n  selfSustain: \"If enabled, shows aspects which can be removed after completing the chosen aspects.\",\r\n  preference: \"Controls the scoring system for builds. The first option will make the search favor builds which require less points to sustain after removing all unnecessary aspects. The second option favors paths which require the least amount of points to reach, but may require more points to sustain.\",\r\n  considerDipping: \"If enabled, the search will include the possibility of 'dipping' into a tier 2 aspects to get the embodiment reward on their second node, for only 2 points. This is rarely ever useful for finding shortest paths. If you're using this, you should increase the 'builds to try' setting considerably.\",\r\n}\r\n\r\nString.prototype.format = function () { // by gpvos from stackoverflow\r\n  var args = arguments;\r\n  return this.replace(/\\{(\\d+)\\}/g, function (m, n) { return args[n]; });\r\n};\r\n\r\n// generate a new \"internal\" aspect for each tier 2 aspect, one for each different embodiment rewards you can choose in node 2.\r\nvar num = 999; // object key for these aspects, starts at high number to uhm... avoid any problems\r\nvar extraAspects = {};\r\n\r\nif (generateTechnicalAspects) {\r\n  for (var x in aspects) {\r\n    var aspect = aspects[x];\r\n  \r\n    if (aspect.tier == 2) {\r\n      var embs = {\r\n        force: 1,\r\n        entropy: 1,\r\n        form: 1,\r\n        inertia: 1,\r\n        life: 1,\r\n      }\r\n  \r\n      for (var z in embs) {\r\n        var newAspect = {\r\n          name: aspect.name + \" (+{0})\".format(z),\r\n          id: aspect.id, // same id so the calc function doesnt pick multiple\r\n          family: \"special\",\r\n          tier: aspect.tier,\r\n          requirements: aspect.requirements, // does this reference or copy??\r\n          rewards: {},\r\n          nodes: aspect.nodes,\r\n          hasChoiceNode: aspect.hasChoiceNode,\r\n          generated: true, // if this property exists, aspect does not render in UI\r\n          extraEmbodimentType: z,\r\n        };\r\n  \r\n        for (var v in aspect.rewards) {\r\n          newAspect.rewards[v] = aspect.rewards[v];\r\n        }\r\n  \r\n        if (newAspect.rewards[z] == undefined)\r\n          newAspect.rewards[z] = 1;\r\n        else\r\n          newAspect.rewards[z] += embs[z]; // add +1 embodiment\r\n  \r\n        num++;\r\n  \r\n        extraAspects[num] = newAspect;\r\n      }\r\n  \r\n      // generate dipping aspects, which only have 2 nodes and grant 1 embodiment\r\n      for (var b in embs) {\r\n        var newAspect = {\r\n          name: aspect.name + \" (dip, +{0})\".format(b),\r\n          id: aspect.id, // same id so the calc function doesnt pick multiple\r\n          family: \"special\",\r\n          tier: aspect.tier,\r\n          requirements: aspect.requirements,\r\n          rewards: {},\r\n          nodes: 2, // dipping aspects only have 2 nodes\r\n          hasChoiceNode: aspect.hasChoiceNode,\r\n          dipping: true,\r\n          generated: true, // if this property exists, aspect does not render in UI\r\n          extraEmbodimentType: b,\r\n        };\r\n  \r\n        newAspect.rewards[b] = 1; // tier 2 dips reward 1 embodiment\r\n  \r\n        num++;\r\n  \r\n        extraAspects[num] = newAspect;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfor (var x in extraAspects) { // gotta do this here because we cannot change an object while we're iterating through it\r\n  aspects[x] = extraAspects[x];\r\n}\r\n\r\n// calculate embodiments rewarded per Ascension point spent\r\nfor (var x in aspects) {\r\n  var aspect = aspects[x];\r\n  aspect.rewardsPerPoint = {};\r\n  aspect.totalRequirements = 0;\r\n\r\n  for (var y in aspect.rewards) {\r\n    aspect.rewardsPerPoint[y] = aspect.rewards[y] / aspect.nodes\r\n  }\r\n\r\n  // total embodiment req\r\n  for (var z in aspect.requirements) {\r\n    aspect.totalRequirements += aspect.requirements[z];\r\n  }\r\n}\r\n\r\nclass Checkbox extends React.Component {\r\n  toggle(data, e) {\r\n    if (this.props.app.state.selection.includes(this.props.data)) {\r\n      this.props.app.updateSelection(this.props.data, null)\r\n\r\n      if (!this.props.data.isCoreNode && this.props.data.tier != 3)\r\n        this.props.app.updateExclusion(this.props.data, null)\r\n    }\r\n    else if (this.props.app.state.excluded.includes(this.props.data)) {\r\n      this.props.app.updateExclusion(this.props.data, null)\r\n    }\r\n    else {\r\n      this.props.app.updateSelection(this.props.data, null);\r\n    }\r\n  }\r\n  render() {\r\n    var state = \"checkbox \";\r\n    var text = \"\"\r\n\r\n    if (this.props.app.state.selection.includes(this.props.data)) {\r\n      state += \"chk-green\"\r\n      text = \"✓\"\r\n    }\r\n    else if (this.props.app.state.excluded.includes(this.props.data)) {\r\n      state += \"chk-red\"\r\n      text = \"✕\"\r\n    }\r\n\r\n    return (\r\n      <div className={\"unselectable \" + state + \" \" + (this.props.darkMode ? \"dark-mode-checkbox\" : \"\")} onClick={() => this.toggle()}>\r\n        <p>{text}</p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass Embodiment extends React.Component {\r\n  render() {\r\n    return (\r\n    <div className={\"embodiment \" + this.props.type + ((this.props.darkMode) ? \" dark-mode-embodiment\" : \" \")}>\r\n      <p className={(this.props.darkMode ? \"dark-mode-text\" : \"\")}>{this.props.amount}</p>\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass Aspect extends React.Component {\r\n  getRequirementsText() {\r\n    var elements = [];\r\n\r\n    for (var x in this.props.data.requirements) {\r\n      var amount = this.props.data.requirements[x]\r\n      var element;\r\n      var type = x; // serves to figure out css class\r\n      let darkMode = (this.props.darkMode)\r\n\r\n      element = <Embodiment key={x} darkMode={darkMode} type={type} amount={amount}/>\r\n      elements.push(element);\r\n    }\r\n\r\n    return elements;\r\n  }\r\n\r\n  getRewards() {\r\n    var text = [];\r\n    var embs = {\r\n      force: 0,\r\n      entropy: 0,\r\n      form: 0,\r\n      inertia: 0,\r\n      life: 0,\r\n    }\r\n\r\n    for (var x in this.props.data.rewards) {\r\n      var amount = this.props.data.rewards[x]\r\n      embs[x] = amount;\r\n    }\r\n\r\n    // don't even show the header for tier 3 aspects\r\n    var header = (this.props.data.tier != 3) ? \"Completion rewards:\" : \"\";\r\n    for (var z in embs) {\r\n      if (embs[z] != 0)\r\n        text.push(<p key={this.props.data.name + \"_tooltip_\" + z}>{embs[z] + \" \" + capitalizeFirstLetter(z)}</p>);\r\n    }\r\n\r\n    return <div>\r\n      <p>{header}</p>\r\n      <div>{text}</div>\r\n    </div>;\r\n  }\r\n\r\n  getTooltip() {\r\n    var name = this.props.data.name\r\n    var cost = this.props.data.nodes;\r\n    var rewards = this.getRewards();\r\n    var nodeText = ((this.props.data.nodes > 1) ? \" ({0} nodes)\" : \" ({0} node)\").format(cost)\r\n    \r\n    // note to self, dont nest <p> elements accidentally\r\n    return (<div className=\"tooltip\">\r\n        <p className=\"tooltip\">{name + nodeText}<br /></p>\r\n        {rewards}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Tippy content={this.getTooltip()} placement=\"bottom\" duration=\"0\">\r\n        <div className=\"aspect unselectable\">\r\n          <Checkbox data={this.props.data} app={this.props.app} darkMode={this.props.darkMode}></Checkbox>\r\n          <p className={(this.props.darkMode ? \"dark-mode-text\" : \"\")}>{this.props.data.name}</p>\r\n          <div className=\"embodiments-box\">\r\n            {this.getRequirementsText()}\r\n          </div>\r\n        </div>\r\n      </Tippy>\r\n    )\r\n  }\r\n}\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      selection: [],\r\n      excluded: [], // excluded aspects\r\n      result: null,\r\n      waiting: false,\r\n      useFullCore: false,\r\n      considerDipping: false,\r\n      selfSustain: true,\r\n      pointsBudget: 26,\r\n      preference: \"0\", // scoring mode\r\n      iterations: 30000, // how many random builds are generated and compared\r\n      maximumOutputs: 10,\r\n      resultIndex: 0,\r\n      darkMode: false,\r\n    }\r\n\r\n    if (window.localStorage.getItem(\"darkMode\") == \"true\")\r\n      this.state.darkMode = true;\r\n  }\r\n\r\n  changeIndex(change) {\r\n    let current = this.state.resultIndex;\r\n    current += change;\r\n    if (current > this.state.result.bestPaths.length-1)\r\n      current = 0;\r\n    else if (current < 0)\r\n      current = this.state.result.bestPaths.length-1;\r\n\r\n    this.setState({\r\n      resultIndex: current,\r\n    })\r\n  }\r\n\r\n  filterApplicableAspects(list) { // list is chosen aspects\r\n\r\n    // if player chose tier 2s, replace those with generated versions. later we will discard the duplicates once one of the variants has been chosen\r\n    var realList = [];\r\n    var excludedAspects = [];\r\n    for (var n = 0; n < this.state.excluded.length; n++) {\r\n      excludedAspects.push(this.state.excluded[n].id)\r\n    }\r\n    \r\n    for (var x = 0; x < list.length; x++) { // this works\r\n      var aspect = list[x];\r\n\r\n      realList.push(aspect); // we dont split t2s up here now\r\n      // if (aspect.tier == 2) {\r\n      //   for (var z in aspects) {\r\n      //     var asp = aspects[z];\r\n\r\n      //     if (asp.id == aspect.id && asp.generated == true) {\r\n      //       realList.push(asp);\r\n      //     }\r\n      //   }\r\n      // }\r\n      // else {\r\n      //   realList.push(aspect);\r\n      // }\r\n    }\r\n\r\n    // add the full core to the list of user chosen aspects if we're using it\r\n    if (this.state.useFullCore) {\r\n      realList.push(aspects.core_full);\r\n    }\r\n\r\n    list = realList;\r\n\r\n    var newList = {}\r\n    var reqs = {\r\n      force: 0,\r\n      entropy: 0,\r\n      form: 0,\r\n      inertia: 0,\r\n      life: 0,\r\n    }\r\n\r\n    function hasRelevantReward(aspect, reqs) {\r\n      for (var x in aspect.rewards) {\r\n        var reward = aspect.rewards[x];\r\n\r\n        if (excludedAspects.includes(aspect.id)) // excluded aspects\r\n          return false;\r\n\r\n        if (aspect.dipping && !this.state.considerDipping)\r\n          return false;\r\n\r\n        // !!! always ignore base tier 2s !!!, use only the generated versions, which have the +embodiment node considered\r\n        // if (aspect.tier == 2 && aspect.generated == undefined)\r\n        //   return false;\r\n\r\n        // core handling. (do we need handling for the edge case where the calc chooses all 5 cores in non-core mode? probably. TODO)\r\n        if (aspect.id == \"core_full\" && !this.state.useFullCore)\r\n          return false;\r\n        else if (aspect.isCoreNode && this.state.useFullCore)\r\n          return false;\r\n\r\n        // filter out t2 variants that don't have a relevant +emb\r\n        if (aspect.generated != undefined && reqs[aspect.extraEmbodimentType] == 0)\r\n          return false;\r\n\r\n        // if an aspect rewards a type of embodiment we need, it's valid. Otherwise we discard it\r\n        if (reward > 0 && reqs[x] > 0)\r\n          return true;\r\n      }\r\n\r\n      return false;\r\n    }\r\n\r\n    // check what embodiment types we need\r\n    for (var z in list) {\r\n      var aspect = list[z];\r\n\r\n      reqs.force = (aspect.requirements.force > reqs.force) ? aspect.requirements.force : reqs.force;\r\n\r\n      reqs.entropy = (aspect.requirements.entropy > reqs.entropy) ? aspect.requirements.entropy : reqs.entropy;\r\n\r\n      reqs.form = (aspect.requirements.form > reqs.form) ? aspect.requirements.form : reqs.form;\r\n\r\n      reqs.inertia = (aspect.requirements.inertia > reqs.inertia) ? aspect.requirements.inertia : reqs.inertia;\r\n\r\n      reqs.life = (aspect.requirements.life > reqs.life) ? aspect.requirements.life : reqs.life;\r\n    }\r\n\r\n    for (var x in aspects) {\r\n      var aspect = aspects[x];\r\n\r\n      const func = hasRelevantReward.bind(this);\r\n      if (func(aspect, reqs)) {\r\n        newList[x] = aspect;\r\n      }\r\n    }\r\n\r\n    // make sure the aspects we have chosen don't get filtered out.\r\n    // note to self: how the fuck does this avoid base t2s?\r\n    for (var y in list) {\r\n      if (!newList.hasOwnProperty(list[y].id))\r\n        newList[list[y].id] = list[y];\r\n    }\r\n\r\n    var highestReq = 0;\r\n    var aspectWithHighestRequirements;\r\n\r\n    for (var i in newList) {\r\n      if (newList[i].totalRequirements > highestReq)\r\n        aspectWithHighestRequirements = newList[i];\r\n    }\r\n\r\n    var chosenAspects = {}; // turn it into object and filter out irrelevant t2 variants\r\n    for (var b = 0; b < list.length; b++) {\r\n      var asp = list[b]\r\n      if ((asp.generated != undefined && reqs[asp.extraEmbodimentType] == 0) || asp.dipping != undefined) {\r\n        //console.log(\"unneeded \" + asp.name)\r\n      }\r\n      else\r\n        chosenAspects[b] = list[b];\r\n    }\r\n\r\n    this.setState({\r\n      waiting: true,\r\n    })\r\n\r\n    return { // this works\r\n      reqs: reqs,\r\n      aspects: newList,\r\n      chosenAspects: chosenAspects,\r\n      aspectWithHighestRequirements: aspectWithHighestRequirements,\r\n    };\r\n  }\r\n\r\n  async calculateV2() {\r\n    // step 1: make a list of relevant aspects and gather the total embodiment requirements\r\n    var data = this.filterApplicableAspects(this.state.selection);\r\n    data.chosenAspects = _.cloneDeep(data.chosenAspects)\r\n    console.log(data.chosenAspects);\r\n    // quit if nothing was selected\r\n    if (Object.keys(data.chosenAspects).length == 0)\r\n      return;\r\n\r\n    // warn if the user has excluded a lot of aspects\r\n    if (this.state.excluded.length >= 6)\r\n      if (!window.confirm(\"You've excluded a lot of aspects. I haven't implemented failsafes for that so if you continue, the webpage may freeze if there is literally no way to build towards the goal. Just a warnin'.\"))\r\n        return;\r\n    \r\n    var reqs = getTotalReqs(data.chosenAspects);\r\n\r\n    var relevantEmbodiments = []; // works\r\n    for (let x in reqs) {\r\n      if (reqs[x] > 0)\r\n        relevantEmbodiments.push(x);\r\n    }\r\n\r\n    var chosenAspects = [] // we \"shuffle\" this.\r\n    var buildWithChosenAspects = [];\r\n    for (let x in data.chosenAspects) {\r\n      chosenAspects.push(data.chosenAspects[x]);\r\n      buildWithChosenAspects.push(data.chosenAspects[x])\r\n    }\r\n\r\n    var validBuilds = []; // valid self-sustainable builds\r\n\r\n    function getRemainingReqs(build, deleteUnused=false) {\r\n      let reqs = getTotalReqs(build);\r\n\r\n      for (let x in build) {\r\n        let asp = build[x]\r\n        for (let z in asp.rewards) {\r\n          reqs[z] -= asp.rewards[z];\r\n        }\r\n      }\r\n\r\n      if (deleteUnused) {\r\n        for (let x in reqs) {\r\n          if (reqs[x] < 1) {\r\n            delete reqs[x]\r\n          }\r\n        }\r\n      }\r\n\r\n      return reqs;\r\n    }\r\n\r\n    function hasRelevantRewards(asp, reqs) {\r\n      for (let x in reqs) {\r\n        if (asp.rewards[x] != undefined) {\r\n          if (asp.rewards[x] > 0)\r\n            return true;\r\n        }\r\n      }\r\n      return false;\r\n    }\r\n\r\n    function includesAspect(build, asp) {\r\n      for (let x in build) {\r\n        if (build[x].id == asp.id)\r\n          return true;\r\n      }\r\n      return false;\r\n    }\r\n\r\n    var tier1s = []; // todo use these?\r\n    for (let x in data.aspects) {\r\n      if (data.aspects[x].tier == 1)\r\n        tier1s.push(data.aspects[x])\r\n    }\r\n\r\n    console.log(data.aspects);\r\n\r\n    // new build\r\n    for (let x = 0; x < this.state.iterations; x++) {\r\n      let chosenAspects = _.cloneDeep(buildWithChosenAspects);\r\n      let aspects = _.cloneDeep(data.aspects);\r\n      //var selfSustainBuild = [...buildWithChosenAspects]\r\n      var selfSustainBuild = [];\r\n\r\n      for (let x in chosenAspects) {\r\n        let asp = chosenAspects[x]\r\n        if (asp.tier == 2) {\r\n          let embBonus = _.sample(relevantEmbodiments)\r\n\r\n          asp.rewards[embBonus] = (asp.rewards[embBonus] == undefined) ? 1 : asp.rewards[embBonus] + 1;\r\n          asp.name += \" (+\" + embBonus + \")\"\r\n        }\r\n        selfSustainBuild.push(asp);\r\n      }\r\n\r\n      for (let x = 0; x < 1000; x++) { // getting rest of aspects needed to selfsustain\r\n        if (selfSustainBuild.length >= 10)\r\n          break;\r\n\r\n        let reqs = getRemainingReqs(selfSustainBuild);\r\n\r\n        // check if we're done\r\n        if (fullfillsRequirements(selfSustainBuild)) {\r\n          // if (!validBuilds.includes(selfSustainBuild)) // no idea if this works\r\n          validBuilds.push(selfSustainBuild);\r\n          break;\r\n        }\r\n        else { // else pick random asp and check again\r\n          let asp = _.sample(aspects);\r\n\r\n          if (hasRelevantRewards(asp, reqs) && !includesAspect(selfSustainBuild, asp)) {\r\n            if (asp.tier == 2) {\r\n              let embBonus = _.sample(relevantEmbodiments)\r\n\r\n              if (embBonus != undefined) {\r\n                asp.rewards[embBonus] = (asp.rewards[embBonus] == undefined) ? 1 : asp.rewards[embBonus] + 1;\r\n                asp.name += \" (+\" + embBonus + \")\"\r\n\r\n                selfSustainBuild.push(asp);\r\n              }\r\n            }\r\n            else {\r\n              selfSustainBuild.push(asp);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    var bestBuilds = [];\r\n    var bestPoints = null;\r\n    for (let x in validBuilds) { // filter them down to the most point-efficient ones\r\n      let build = validBuilds[x]\r\n      let pointsNeeded = getTotalPoints(build)\r\n\r\n      if (bestBuilds.length == 0) {\r\n        bestBuilds.push(build);\r\n        bestPoints = pointsNeeded;\r\n      }\r\n      else if (pointsNeeded < bestPoints) {\r\n        bestBuilds = [build]; // CAREFUL! PREV WE WERE SETTING THIS TO []\r\n        bestPoints = pointsNeeded;\r\n      }\r\n      else if (pointsNeeded == bestPoints && bestBuilds.length <= this.state.maximumOutputs) {\r\n        bestBuilds.push(build);\r\n      }\r\n    }\r\n\r\n    console.log(bestBuilds);\r\n    console.log(bestPoints);\r\n\r\n    var bestPaths = [];\r\n    var bestPathsPoints = null;\r\n\r\n    for (let x in bestBuilds) { // todo: revise if it rand picks the same way of calcV1, then filter the fastest paths\r\n      let keyAspects = bestBuilds[x];\r\n      let aspects = _.cloneDeep(data.aspects);\r\n      let path = [];\r\n      let build = [];\r\n      let keys = 0;\r\n\r\n      for (let z = 0; z < this.state.iterations/3; z++) {\r\n        for (let c in keyAspects) {\r\n          let asp = keyAspects[c]\r\n          if (fullfillsRequirements(build, [asp]) && !includesAspect(build, asp)) {\r\n            console.log(\"picked \" + asp.name + \" (goal) because reqs were fulfilled\")\r\n\r\n            build.push(asp);\r\n            path.push({\r\n              aspect: asp,\r\n              role: (includesAspect(data.chosenAspects, asp)) ? \"goal\" : \"key\", // todo distinguish goal and key\r\n            });\r\n\r\n            keys++;\r\n          }\r\n        }\r\n\r\n        // check if we got everything\r\n        if (keys === keyAspects.length) {\r\n          break;\r\n        }\r\n        else {\r\n          let asp = _.sample(aspects);\r\n          let relevantEmbodiments = getRemainingReqs(keyAspects, true);\r\n          // let relevantEmbodiments = getRemainingReqs(build); // this was a problem, we're checking the reqs of what we're building...\r\n\r\n          if (hasRelevantRewards(asp, reqs) && !includesAspect(build, asp) && fullfillsRequirements(build, [asp])) {\r\n            if (asp.tier == 2) {\r\n              let embBonus = _.sample(relevantEmbodiments)\r\n\r\n              //console.log(embBonus)\r\n\r\n              if (embBonus != undefined) {\r\n                asp.rewards[embBonus] = (asp.rewards[embBonus] == undefined) ? 1 : asp.rewards[embBonus] + 1;\r\n                asp.name += \" (+\" + embBonus + \")\"\r\n\r\n                build.push(asp);\r\n\r\n                path.push({\r\n                  aspect: asp,\r\n                  role: \"removable\"\r\n                })\r\n              }\r\n            }\r\n            else {\r\n              build.push(asp);\r\n\r\n              path.push({\r\n                aspect: asp,\r\n                role: \"removable\"\r\n              })\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      for (let z = 0; z < path.length; z++) {\r\n        if (path[z].role == \"removable\") {\r\n          path.push({\r\n            aspect: path[z].aspect,\r\n            role: \"remove\",\r\n          })\r\n        }\r\n      }\r\n\r\n      let points = getTotalPoints(build);\r\n\r\n      if (bestPaths.length == 0) {\r\n        bestPaths.push(path);\r\n        bestPathsPoints = points;\r\n      }\r\n      else if (points < bestPathsPoints) {\r\n        bestPaths = [path];\r\n        bestPathsPoints = points;\r\n      }\r\n      else if (points == bestPathsPoints) {\r\n        bestPaths.push(path);\r\n      }\r\n    }\r\n\r\n    var pathIds = []\r\n    var duplicates = []\r\n\r\n    // filter out duplicates\r\n    for (let x in bestPaths) {\r\n      let pathId = []\r\n\r\n      for (let z in bestPaths[x]) {\r\n        let asp = bestPaths[x][z].aspect;\r\n        pathId.push(asp.id)\r\n      }\r\n\r\n      pathId.sort();\r\n\r\n      if (pathIds.length == 0)\r\n        pathIds.push(pathId)\r\n      else {\r\n        for (let z in pathIds) {\r\n          if (pathIds[z] == pathId) {\r\n            pathIds.push(pathId)\r\n          }\r\n          else {\r\n            duplicates.push(bestPaths[x])\r\n          }\r\n        }\r\n      }\r\n    \r\n    }\r\n\r\n    bestPaths = bestPaths.filter(function(item){\r\n      return !duplicates.includes(item);\r\n    })\r\n\r\n    console.log(\"Paths:\")\r\n    console.log(bestPaths)\r\n\r\n    var result = {\r\n      bestBuilds: bestBuilds,\r\n      buildPoints: bestPoints,\r\n      selfSustainPoints: bestPoints,\r\n      bestPaths: bestPaths,\r\n      pathPoints: bestPathsPoints,\r\n    }\r\n\r\n    //return result;\r\n    this.setState({\r\n      result: result,\r\n      resultIndex: 0,\r\n    })\r\n  }\r\n\r\n  async calculate() {\r\n    // step 1: make a list of relevant aspects and gather the total embodiment requirements\r\n    var data = this.filterApplicableAspects(this.state.selection);\r\n    console.log(data.chosenAspects)\r\n\r\n    // warn if the user has excluded a lot of aspects\r\n    if (this.state.excluded.length >= 6)\r\n      if (!window.confirm(\"You've excluded a lot of aspects. I haven't implemented failsafes for that so if you continue, the webpage may freeze if there is literally no way to build towards the goal. Just a warnin'.\"))\r\n        return;\r\n\r\n    var bestBuild;\r\n\r\n    // quit if nothing was selected\r\n    if (Object.keys(data.chosenAspects).length == 0)\r\n      return;\r\n\r\n    // step 2: create random builds and save the most point-efficient one\r\n    for (var iteration = 0; iteration < this.state.iterations; iteration++) {\r\n      var aspects = data.aspects;\r\n      var chosenAspects = [] // we \"shuffle\" this.\r\n      for (var x in data.chosenAspects) {\r\n        chosenAspects.push(data.chosenAspects[x]);\r\n      }\r\n      shuffle(chosenAspects);\r\n\r\n      var build = [];\r\n\r\n      var availableAspects = {}; // unnecessary? we dont edit this list\r\n      for (var u in aspects) {\r\n        availableAspects[u] = aspects[u]\r\n      }\r\n\r\n      for (var attempts = 0; attempts < 2000; attempts++) {\r\n\r\n        // pick random aspect\r\n        var aspect = _.sample(availableAspects)\r\n        var skipRandomChoice = false;\r\n\r\n        //CHECK IF WE MEET THE REQS FOR THE PLAYER-PICKED NODES, AND IF SO, START PUTTING THOSE IN AND IGNORE THE RANDOMLY PICKED ASPECT\r\n        var breakThis = false;\r\n        for (var v in chosenAspects) {\r\n          if (breakThis)\r\n            break;\r\n          \r\n          var chosenAspect = chosenAspects[v]\r\n\r\n          if (fullfillsRequirements(build, {chosenAspect}) && !aspectAlreadyPicked(build, chosenAspect)) {\r\n            build.push(chosenAspect)\r\n\r\n            skipRandomChoice = true;\r\n\r\n            //console.log(\"picked \" + chosenAspect.name + \" (goal) because reqs were fulfilled\")\r\n\r\n            // if one of the goals was a t2, remove the variants of it from the list of goals\r\n            if (chosenAspect.tier == 2) {\r\n              var newGoals = []\r\n\r\n              for (var z in chosenAspects) {\r\n                var asp = chosenAspects[z];\r\n                if (asp.id == chosenAspect.id && asp != chosenAspect) {\r\n                  //console.log(\"removed \" + asp.name)\r\n                }\r\n                else {\r\n                  newGoals.push(asp);\r\n                }\r\n              }\r\n\r\n              chosenAspects = newGoals;\r\n\r\n              breakThis = true; // can we just replace this with break?\r\n            }\r\n\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (!skipRandomChoice) {\r\n          // choose it if we can and if we dont already have it in some way (relevant for t2s)\r\n          if (fullfillsRequirements(build, {aspect}) && !aspectAlreadyPicked(build, aspect)) {\r\n            build.push(aspect)\r\n\r\n            //console.log(\"picked \" + aspect.name)\r\n          }\r\n        }\r\n\r\n        // check if we got all the nodes we wanted\r\n        var allChosenNodesObtained = false;\r\n        for (var n in chosenAspects) {\r\n          if (!build.includes(chosenAspects[n])) {\r\n            allChosenNodesObtained = false;\r\n            break;\r\n          }\r\n\r\n          allChosenNodesObtained = true;\r\n        }\r\n\r\n        // self-sustaining\r\n        // TODO MAKE IT TRY TO REMOVE THE MOST COSTLY ONES FIRST - to do this, first make an ordered list of aspects from most costly to cheapest\r\n        var aspectsToRemove = [];\r\n        var filteredBuild = build;\r\n        if (allChosenNodesObtained && this.state.selfSustain) {\r\n          // for (var x = 0; x < build.length; x++) {\r\n          //   var asp = build[x];\r\n          //   var buildWithoutThat = filteredBuild.filter(function(val) {return val != asp });\r\n\r\n          //   if (fullfillsRequirements(buildWithoutThat) && !isInObject(asp, data.chosenAspects) && filteredBuild.includes(asp)) {\r\n          //     aspectsToRemove.push(asp);\r\n          //     filteredBuild = filteredBuild.filter(function(val) {return val != asp });\r\n          //   }\r\n          // }\r\n\r\n          for (var x = build.length; x >= 0; x--) {\r\n            var asp = build[x];\r\n            var earliestTimeToRemove = null;\r\n            if (!isInObject(asp, data.chosenAspects)) { // are we checking the right thing here?\r\n              var buildWithoutThat = filteredBuild.filter(function(val) {return val != asp });\r\n              for (var z = build.length; z >= 0; z--) {\r\n                if (fullfillsRequirements(buildWithoutThat) && filteredBuild.includes(asp)) {\r\n                  aspectsToRemove.push({\r\n                    aspect: asp,\r\n                    time: z});\r\n                  filteredBuild = filteredBuild.filter(function(val) {return val != asp });\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        // break if we finished picking aspects for this build\r\n        if (allChosenNodesObtained)\r\n          break;\r\n      }\r\n\r\n      // < ! > Sometimes a build comes up with 0 aspects and points. I assume this happens when the find-aspects loop has finished and somehow, miraculously, all attempts to find a starting point for the build have failed.\r\n      if (build.length != 0) {\r\n        console.log(build);\r\n        var pathOperationOrder = GetPathOperationOrder(build, aspectsToRemove)\r\n        //var pointsToReach = GetMinimumPoints(pathOperationOrder);\r\n        var pointsToReach = getTotalPoints(build)\r\n        var pointsToSustain = getTotalPoints(filteredBuild)\r\n\r\n        var buildInfo = {\r\n          aspects: build,\r\n          aspectsToRemove: aspectsToRemove,\r\n          pathOperationOrder: pathOperationOrder,\r\n          points: pointsToReach,\r\n          finalCost: pointsToSustain,\r\n          score: pointsToReach + pointsToSustain + ((this.state.preference == \"0\") ? 0 : build.length), // less aspects = better, discourages needlessly picking builds only to despec them later\r\n          totalEmbodiments: getTotalRewards(build),\r\n        }\r\n\r\n        // check if new build is more point-efficient or tied, in which case we keep both tracked\r\n        if (bestBuild == undefined)\r\n          bestBuild = buildInfo;\r\n        else if (buildInfo.score < bestBuild.score && buildInfo.points <= this.state.pointsBudget) // favoring only finalCost doesnt really work, it picks 50-point builds\r\n          bestBuild = buildInfo;\r\n      }\r\n    }\r\n\r\n    console.log(\"--- Best Build ---\")\r\n    console.log(bestBuild);\r\n\r\n    this.setState({\r\n      result: bestBuild,\r\n      waiting: false,\r\n    })\r\n  }\r\n\r\n  // add/remove aspects to the list of aspects we want to calculate, called by the checkboxes\r\n  updateSelection(aspect, e) {\r\n    var selection = this.state.selection.slice();\r\n\r\n    if (!selection.includes(aspect))\r\n      selection.push(aspect);\r\n    else\r\n      selection = selection.filter(function(val, index, arr){ return val != aspect })\r\n\r\n    this.setState({\r\n      selection: selection\r\n    })\r\n  }\r\n\r\n  updateExclusion(aspect, e) {\r\n    var selection = this.state.excluded.slice();\r\n\r\n    if (!selection.includes(aspect))\r\n      selection.push(aspect);\r\n    else\r\n      selection = selection.filter(function(val, index, arr){ return val != aspect })\r\n\r\n    this.setState({\r\n      excluded: selection\r\n    })\r\n  }\r\n\r\n  render() {\r\n    var forceAspects = [];\r\n    var entropyAspects = [];\r\n    var formAspects = [];\r\n    var inertiaAspects = [];\r\n    var lifeAspects = [];\r\n\r\n    // dark mode\r\n    let textClass = \"\"\r\n    let checkboxClass = \"\"\r\n    if (this.state.darkMode) {\r\n      document.getElementsByTagName(\"body\")[0].classList = \"dark-bg\"\r\n      textClass += \"dark-mode-text\"\r\n      checkboxClass += \"dark-mode-checkbox\"\r\n    }\r\n    else {\r\n      document.getElementsByTagName(\"body\")[0].classList = \"\"\r\n    }\r\n\r\n    // aspect elements\r\n    for (var x in aspects) {\r\n      var aspect = aspects[x];\r\n      var currentAspect;\r\n\r\n      var element = <Aspect\r\n      darkMode={this.state.darkMode} \r\n      data={aspect}\r\n      key={x}\r\n      clickCallback={this.updateSelection.bind(this)}\r\n      app={this}\r\n      />\r\n\r\n      var hr = <hr key={x + \"_hr\"}></hr>;\r\n\r\n      if (aspect.generated == undefined) { // don't display \"technical\" aspects\r\n        switch (aspect.family) {\r\n          case \"force\":\r\n            currentAspect = forceAspects;\r\n            break;\r\n          case \"entropy\":\r\n            currentAspect = entropyAspects;\r\n            break;\r\n          case \"form\":\r\n            currentAspect = formAspects;\r\n            break;\r\n          case \"inertia\":\r\n            currentAspect = inertiaAspects;\r\n            break;\r\n          case \"life\":\r\n            currentAspect = lifeAspects;\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n\r\n      if (currentAspect != undefined) {\r\n        if (currentAspect != undefined && currentAspect.generated == undefined)\r\n          currentAspect.push(element);\r\n\r\n        var aspectsAfterWhichWePutAnHrSoThingsLookNice = [\r\n          \"core_force\",\r\n          \"serpent\",\r\n          \"tiger\",\r\n          \"core_entropy\",\r\n          \"wolf\",\r\n          \"supplicant\",\r\n          \"core_form\",\r\n          \"silkworm\",\r\n          \"wealth\",\r\n          \"core_inertia\",\r\n          \"guardsman\",\r\n          \"rhinoceros\",\r\n          \"core_life\",\r\n          \"rabbit\",\r\n          \"stag\",\r\n        ]\r\n        if (aspectsAfterWhichWePutAnHrSoThingsLookNice.includes(aspect.id) && currentAspect.generated == undefined)\r\n          currentAspect.push(hr);\r\n        }\r\n    }\r\n\r\n    var requirementsInfo = null;\r\n    if (this.state.selection.length > 0) {\r\n      let reqs = getTotalReqs(this.state.selection, true)\r\n      let rewards = getTotalRewards(this.state.selection, true, true)\r\n\r\n      let reqEmbs = []\r\n      let rewEmbs = []\r\n      var key = 0;\r\n\r\n      for (let x in reqs) {\r\n        reqEmbs.push(<Embodiment\r\n          key={key}\r\n          type={x}\r\n          amount={reqs[x]}\r\n          darkMode={this.state.darkMode}\r\n        />)\r\n        key++;\r\n      }\r\n\r\n      for (let x in rewards) {\r\n        if (x == \"any\") {\r\n          rewEmbs.push(<p key={key} className={textClass}>{\", {0} any\".format(rewards[x])}</p>)\r\n        }\r\n        else {\r\n          rewEmbs.push(<Embodiment\r\n            key={key}\r\n            type={x}\r\n            amount={rewards[x]}\r\n            darkMode={this.state.darkMode}\r\n          />)\r\n        }\r\n        key++;\r\n      }\r\n\r\n      requirementsInfo = <div className=\"flexbox-horizontal\">\r\n        <p className={textClass}>{\"Requirements of chosen aspects: \"}</p>\r\n        {reqEmbs}\r\n        <p className={textClass}>{\", rewards:\"}</p>\r\n        {rewEmbs}\r\n      </div>\r\n    }\r\n\r\n    var text = [];\r\n    if (this.state.result != null) {\r\n      let header = ((this.state.result.bestPaths.length > 1) ? \"{0} paths found\" : \"{0} path found\").format(this.state.result.bestPaths.length) + \" ({0} points to sustain)\".format(this.state.result.buildPoints)\r\n\r\n      var resultsPanel = <div className=\"flexbox-horizontal\">\r\n        {(this.state.result.bestPaths.length > 1) ? <button className=\"arrow-button\" onClick={() => this.changeIndex(1)}>{\"<\"}</button> : null}\r\n        <p className={textClass}>{header}</p>\r\n        {(this.state.result.bestPaths.length > 1) ? <button className=\"arrow-button\" onClick={() => this.changeIndex(-1)}>{\">\"}</button> : null}\r\n      </div>\r\n\r\n      var path = this.state.result.bestPaths[this.state.resultIndex];\r\n      let darkModeClass = this.state.darkMode ? \"-dark-mode\" : \"\"\r\n\r\n      for (let x in path) {\r\n        let element = path[x];\r\n\r\n        switch(element.role) {\r\n          case \"goal\": {\r\n            text.push(<p className={\"result-goal\" + darkModeClass} key={x}>{element.aspect.name}</p>)\r\n            break;\r\n          }\r\n          case \"removable\": {\r\n            text.push(<p className={\"result-removable\" + darkModeClass} key={x}>{element.aspect.name}</p>)\r\n            break;\r\n          }\r\n          case \"remove\": {\r\n            text.push(<p className={\"result-removable\" + darkModeClass} key={x}>{\"❌ \" + element.aspect.name}</p>)\r\n            break;\r\n          }\r\n          case \"key\": {\r\n            text.push(<p className={\"result-key\" + darkModeClass} key={x}>{element.aspect.name}</p>)\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (x != path.length - 1)\r\n          text.push(<p className={\"result-arrow\" + darkModeClass} key={-x-1}>{\" -> \"}</p>)\r\n      }\r\n    }\r\n    else\r\n      var resultsPanel = null;\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"table\">\r\n          <div className=\"aspect-column\">\r\n            {forceAspects}\r\n          </div>\r\n          <div className=\"aspect-column\">\r\n            {entropyAspects}\r\n          </div>\r\n          <div className=\"aspect-column\">\r\n            {formAspects}\r\n          </div>\r\n          <div className=\"aspect-column\">\r\n            {inertiaAspects}\r\n          </div>\r\n          <div className=\"aspect-column\">\r\n            {lifeAspects}\r\n          </div>\r\n        </div>\r\n        <div className=\"bottom-interface\">\r\n          <Tippy content={strings.iterations} placement=\"bottom\" duration=\"0\">\r\n            <div className=\"num-input\">\r\n              <p className={textClass}>Builds to try:</p>\r\n              <input type=\"val\" value={this.state.iterations} onChange={(e) => this.setState({iterations: e.target.value})}></input>\r\n            </div>\r\n          </Tippy>\r\n          <Tippy content={strings.useFullCore} placement=\"bottom\" duration=\"0\">\r\n            <div className=\"checkbox-bottom-ui\">\r\n              <input type=\"checkbox\" checked={this.state.useFullCore} onChange={(e) => this.setState({useFullCore: e.target.checked})}></input>\r\n              <p className={textClass}>Use a full Core</p>\r\n            </div>\r\n          </Tippy>\r\n          {/* <Tippy content={strings.considerDipping} placement=\"bottom\" duration=\"0\">\r\n            <div className=\"checkbox-bottom-ui\">\r\n              <input type=\"checkbox\" checked={this.state.considerDipping} onChange={(e) => this.setState({considerDipping: e.target.checked})}></input>\r\n              <p className={textClass}>Consider dipping tier 2 aspects</p>\r\n            </div>\r\n          </Tippy> */}\r\n          {/* <Tippy content={strings.selfSustain} placement=\"bottom\" duration=\"0\">\r\n            <div className=\"checkbox-bottom-ui\">\r\n              <input type=\"checkbox\" checked={this.state.selfSustain} onChange={(e) => this.setState({selfSustain: e.target.checked})}></input>\r\n              <p>Self-sustain</p>\r\n            </div>\r\n          </Tippy> */}\r\n          <Tippy content={\"Change the UI to be dark.\"} placement=\"bottom\" duration=\"0\">\r\n          <div className=\"checkbox-bottom-ui\">\r\n              <input type=\"checkbox\" checked={this.state.darkMode} onChange={(e) => {this.setState({darkMode: e.target.checked}); window.localStorage.setItem(\"darkMode\", e.target.checked)}}></input>\r\n              <p className={textClass}>Dark mode</p>\r\n            </div>\r\n          </Tippy>\r\n          {/* <Tippy content={strings.preference} placement=\"bottom\" duration=\"0\">\r\n            <div className=\"dropdown\">\r\n              <select onChange={(e) => this.setState({preference: e.target.value})}>\r\n                <option value=\"0\">Prefer builds with lower final cost</option>\r\n                <option value=\"1\">Prefer builds with fewer points needed to reach</option>\r\n              </select>\r\n            </div>\r\n          </Tippy> */}\r\n        </div>\r\n        <div className=\"bottom-interface column\">\r\n          {requirementsInfo}\r\n          <button onClick={() => this.calculateV2()}>Search short paths</button>\r\n          {/* <p>{resultText}</p> */}\r\n          {resultsPanel}\r\n        </div>\r\n        <div className=\"flexbox-horizontal\">\r\n          {text}\r\n        </div>\r\n        <div className=\"source-code-link\">\r\n          <a href=\"https://github.com/PinewoodPip/ee2calc\">Source code</a>\r\n        </div>\r\n      </div>\r\n    )\r\n  };\r\n}\r\n\r\n// --------- HELPER FUNCTIONS ------------\r\n\r\nfunction shuffle(array) { // https://stackoverflow.com/a/2450976\r\n  var currentIndex = array.length, temporaryValue, randomIndex;\r\n\r\n  // While there remain elements to shuffle...\r\n  while (0 !== currentIndex) {\r\n\r\n    // Pick a remaining element...\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex -= 1;\r\n\r\n    // And swap it with the current element.\r\n    temporaryValue = array[currentIndex];\r\n    array[currentIndex] = array[randomIndex];\r\n    array[randomIndex] = temporaryValue;\r\n  }\r\n\r\n  return array;\r\n}\r\n\r\nfunction capitalizeFirstLetter(string) { // https://stackoverflow.com/a/1026087\r\n  return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n\r\nfunction isInObject(thing, obj) {\r\n  for (var x in obj) {\r\n    if (obj[x] == thing)\r\n      return true\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction getTotalPoints(build) {\r\n  var points = 0;\r\n  for (var x = 0; x < build.length; x++) {\r\n    points += build[x].nodes;\r\n  }\r\n\r\n  return points;\r\n}\r\n\r\nfunction GetMinimumPoints(path) {\r\n  var points = 0;\r\n\r\n  for (var x = 0; x < path.length; x++) {\r\n    var asp = path[x].aspect;\r\n    points += (path[x].operation == \"add\") ? asp.nodes : -asp.nodes;\r\n\r\n  }\r\n\r\n  return points;\r\n}\r\n\r\nfunction GetPathOperationOrder(build, toRemove) {\r\n  var path = [];\r\n\r\n  for (var x = 0; x < build.length; x++) {\r\n    var asp = build[x];\r\n    path.push({aspect: asp, operation: \"add\"})\r\n  }\r\n\r\n  for (var z in toRemove) {\r\n    path.splice(toRemove[z].time, 0, {aspect: toRemove[z].aspect, operation: \"remove\"})\r\n  }\r\n  console.log(path);\r\n  return path;\r\n}\r\n\r\nfunction mergeIntoObject(build, aspect) {\r\n  var newList = {};\r\n  for (var x = 0; x < build.length; x++) {\r\n    newList[x] = build[x];\r\n  }\r\n  newList[aspect.id] = aspect;\r\n\r\n  return newList;\r\n}\r\n\r\nfunction randomProp(obj) {\r\n  var keys = Object.keys(obj);\r\n  return obj[keys[ keys.length * Math.random() << 0]];\r\n};\r\n\r\n// gets the highest requirement for each embodiment on a build\r\nfunction getTotalReqs(aspects, hideUnused=false) { // requires an array\r\n  var embodiments = {\r\n    force: 0,\r\n    entropy: 0,\r\n    form: 0,\r\n    inertia: 0,\r\n    life: 0,\r\n  };\r\n\r\n  // if (typeof aspects == \"object\") {\r\n  //   for (let x in aspect.requirements) {\r\n  //     embodiments[x] = aspect.requirements[x];\r\n  //   }\r\n  // }\r\n  // else {\r\n  //   for (var x in aspects) {\r\n  //     var aspect = aspects[x];\r\n  \r\n  //     for (var z in aspect.requirements) {\r\n  //       if (aspect.requirements[z] > embodiments[z])\r\n  //         embodiments[z] = aspect.requirements[z]\r\n  //     }\r\n  //   }\r\n  // }\r\n\r\n  for (var x in aspects) {\r\n    var aspect = aspects[x];\r\n\r\n    for (var z in aspect.requirements) {\r\n      if (aspect.requirements[z] > embodiments[z])\r\n        embodiments[z] = aspect.requirements[z]\r\n    }\r\n  }\r\n\r\n  if (hideUnused) {\r\n    for (let z in embodiments) {\r\n      if (embodiments[z] <= 0)\r\n        delete embodiments[z]\r\n    }\r\n  }\r\n\r\n  return embodiments;\r\n}\r\n\r\nfunction getTotalRewards(aspects, showAny=false, hideUnused=false) {\r\n  var rewards = {\r\n    force: 0,\r\n    entropy: 0,\r\n    form: 0,\r\n    inertia: 0,\r\n    life: 0,\r\n  };\r\n\r\n  if (showAny)\r\n    rewards.any = 0;\r\n\r\n  for (var x in aspects) {\r\n    var aspect = aspects[x];\r\n\r\n    if (showAny && aspect.tier == 2)\r\n      rewards.any++;\r\n\r\n    for (var r in aspect.rewards) {\r\n      rewards[r] += aspect.rewards[r];\r\n    }\r\n  }\r\n\r\n  if (hideUnused) {\r\n    for (let z in rewards) {\r\n      if (rewards[z] <= 0)\r\n        delete rewards[z]\r\n    }\r\n  }\r\n\r\n  return rewards;\r\n}\r\n\r\nfunction fullfillsRequirements(build, aspect=null) {\r\n  if (aspect != null) {\r\n    var embodiments = getTotalRewards(build);\r\n    var reqs = getTotalReqs(aspect);\r\n\r\n    for (var e in reqs) {\r\n      if (embodiments[e] < reqs[e])\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n  else {\r\n    var embodiments = getTotalRewards(build);\r\n    var reqs = getTotalReqs(build);\r\n\r\n    for (var e in reqs) {\r\n      if (embodiments[e] < reqs[e])\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n\r\nfunction aspectAlreadyPicked(build, aspect) {\r\n  for (var x = 0; x < build.length; x++) {\r\n    if (build[x].id == aspect.id)\r\n      return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nexport default App;\r\n\r\n// serity pls come back, we miss you :(","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}